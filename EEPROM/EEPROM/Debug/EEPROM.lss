
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000134c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  0000134c  000013c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000014e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002b5  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000215e  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001046  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001978  00000000  00000000  0000522e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00006ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a8  00000000  00000000  00006e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a79  00000000  00000000  000072f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000005b8  00000000  00000000  00007d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00008321  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
      7a:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <EE_write_mode>:
#include "uart.h"                             //uart library
#include "TWI.h"                              //TWI library
/****************************************EEPROM FUNCTIONS*****************************************/
/************eeprom in write mode*******************/
void EE_write_mode()
{
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
TWI_send(0xA6);	
      8a:	86 ea       	ldi	r24, 0xA6	; 166
      8c:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
}
      90:	cf 91       	pop	r28
      92:	df 91       	pop	r29
      94:	08 95       	ret

00000096 <EE_read_mode>:
/******************eeprom in read mode**************/
void EE_read_mode()
{
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
TWI_send(0xA7);
      9e:	87 ea       	ldi	r24, 0xA7	; 167
      a0:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
}
      a4:	cf 91       	pop	r28
      a6:	df 91       	pop	r29
      a8:	08 95       	ret

000000aa <EE_byte_write>:

/***********************writes a character to a byte in a page*****************/
void EE_byte_write(unsigned int page,unsigned char byte,unsigned char data )
{
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	df 93       	push	r29
      b0:	cf 93       	push	r28
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	64 97       	sbiw	r28, 0x14	; 20
      b8:	0f b6       	in	r0, 0x3f	; 63
      ba:	f8 94       	cli
      bc:	de bf       	out	0x3e, r29	; 62
      be:	0f be       	out	0x3f, r0	; 63
      c0:	cd bf       	out	0x3d, r28	; 61
      c2:	9a 8b       	std	Y+18, r25	; 0x12
      c4:	89 8b       	std	Y+17, r24	; 0x11
      c6:	6b 8b       	std	Y+19, r22	; 0x13
      c8:	4c 8b       	std	Y+20, r20	; 0x14
unsigned int byte_adress;                              //byte address   
byte_adress=(page*128)+byte;                           //generates  16 bit byte address from page num and byte number
      ca:	89 89       	ldd	r24, Y+17	; 0x11
      cc:	9a 89       	ldd	r25, Y+18	; 0x12
      ce:	9c 01       	movw	r18, r24
      d0:	36 95       	lsr	r19
      d2:	32 2f       	mov	r19, r18
      d4:	22 27       	eor	r18, r18
      d6:	37 95       	ror	r19
      d8:	27 95       	ror	r18
      da:	8b 89       	ldd	r24, Y+19	; 0x13
      dc:	88 2f       	mov	r24, r24
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	82 0f       	add	r24, r18
      e2:	93 1f       	adc	r25, r19
      e4:	9a 83       	std	Y+2, r25	; 0x02
      e6:	89 83       	std	Y+1, r24	; 0x01
TWI_start();                                           //start TWI
      e8:	0e 94 75 03 	call	0x6ea	; 0x6ea <TWI_start>
EE_write_mode();
      ec:	0e 94 41 00 	call	0x82	; 0x82 <EE_write_mode>
TWI_send(byte_adress>>8);                              //MSB of byte address(data word address)
      f0:	89 81       	ldd	r24, Y+1	; 0x01
      f2:	9a 81       	ldd	r25, Y+2	; 0x02
      f4:	89 2f       	mov	r24, r25
      f6:	99 27       	eor	r25, r25
      f8:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
TWI_send(byte_adress);                                  //LSB of byte address(data word address)
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>

TWI_send(data);                                        //input character to eeprom
     102:	8c 89       	ldd	r24, Y+20	; 0x14
     104:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
TWI_stop();                                            //stops TWI
     108:	0e 94 88 03 	call	0x710	; 0x710 <TWI_stop>
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	a8 ec       	ldi	r26, 0xC8	; 200
     112:	b2 e4       	ldi	r27, 0x42	; 66
     114:	8b 83       	std	Y+3, r24	; 0x03
     116:	9c 83       	std	Y+4, r25	; 0x04
     118:	ad 83       	std	Y+5, r26	; 0x05
     11a:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     11c:	6b 81       	ldd	r22, Y+3	; 0x03
     11e:	7c 81       	ldd	r23, Y+4	; 0x04
     120:	8d 81       	ldd	r24, Y+5	; 0x05
     122:	9e 81       	ldd	r25, Y+6	; 0x06
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	4a e7       	ldi	r20, 0x7A	; 122
     12a:	55 e4       	ldi	r21, 0x45	; 69
     12c:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
     130:	dc 01       	movw	r26, r24
     132:	cb 01       	movw	r24, r22
     134:	8f 83       	std	Y+7, r24	; 0x07
     136:	98 87       	std	Y+8, r25	; 0x08
     138:	a9 87       	std	Y+9, r26	; 0x09
     13a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     13c:	11 e0       	ldi	r17, 0x01	; 1
     13e:	6f 81       	ldd	r22, Y+7	; 0x07
     140:	78 85       	ldd	r23, Y+8	; 0x08
     142:	89 85       	ldd	r24, Y+9	; 0x09
     144:	9a 85       	ldd	r25, Y+10	; 0x0a
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	40 e8       	ldi	r20, 0x80	; 128
     14c:	5f e3       	ldi	r21, 0x3F	; 63
     14e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__ltsf2>
     152:	88 23       	and	r24, r24
     154:	0c f0       	brlt	.+2      	; 0x158 <EE_byte_write+0xae>
     156:	10 e0       	ldi	r17, 0x00	; 0
     158:	11 23       	and	r17, r17
     15a:	29 f0       	breq	.+10     	; 0x166 <EE_byte_write+0xbc>
		__ticks = 1;
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	9c 87       	std	Y+12, r25	; 0x0c
     162:	8b 87       	std	Y+11, r24	; 0x0b
     164:	46 c0       	rjmp	.+140    	; 0x1f2 <EE_byte_write+0x148>
	else if (__tmp > 65535)
     166:	11 e0       	ldi	r17, 0x01	; 1
     168:	6f 81       	ldd	r22, Y+7	; 0x07
     16a:	78 85       	ldd	r23, Y+8	; 0x08
     16c:	89 85       	ldd	r24, Y+9	; 0x09
     16e:	9a 85       	ldd	r25, Y+10	; 0x0a
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	3f ef       	ldi	r19, 0xFF	; 255
     174:	4f e7       	ldi	r20, 0x7F	; 127
     176:	57 e4       	ldi	r21, 0x47	; 71
     178:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__gtsf2>
     17c:	18 16       	cp	r1, r24
     17e:	0c f0       	brlt	.+2      	; 0x182 <EE_byte_write+0xd8>
     180:	10 e0       	ldi	r17, 0x00	; 0
     182:	11 23       	and	r17, r17
     184:	61 f1       	breq	.+88     	; 0x1de <EE_byte_write+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     186:	6b 81       	ldd	r22, Y+3	; 0x03
     188:	7c 81       	ldd	r23, Y+4	; 0x04
     18a:	8d 81       	ldd	r24, Y+5	; 0x05
     18c:	9e 81       	ldd	r25, Y+6	; 0x06
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	40 e2       	ldi	r20, 0x20	; 32
     194:	51 e4       	ldi	r21, 0x41	; 65
     196:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
     19a:	dc 01       	movw	r26, r24
     19c:	cb 01       	movw	r24, r22
     19e:	bc 01       	movw	r22, r24
     1a0:	cd 01       	movw	r24, r26
     1a2:	0e 94 2d 04 	call	0x85a	; 0x85a <__fixunssfsi>
     1a6:	dc 01       	movw	r26, r24
     1a8:	cb 01       	movw	r24, r22
     1aa:	9c 87       	std	Y+12, r25	; 0x0c
     1ac:	8b 87       	std	Y+11, r24	; 0x0b
     1ae:	12 c0       	rjmp	.+36     	; 0x1d4 <EE_byte_write+0x12a>
     1b0:	80 e9       	ldi	r24, 0x90	; 144
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	9e 87       	std	Y+14, r25	; 0x0e
     1b6:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     1bc:	8c 01       	movw	r16, r24
     1be:	c8 01       	movw	r24, r16
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <EE_byte_write+0x116>
     1c4:	8c 01       	movw	r16, r24
     1c6:	1e 87       	std	Y+14, r17	; 0x0e
     1c8:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     1cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	9c 87       	std	Y+12, r25	; 0x0c
     1d2:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     1d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     1d8:	00 97       	sbiw	r24, 0x00	; 0
     1da:	51 f7       	brne	.-44     	; 0x1b0 <EE_byte_write+0x106>
     1dc:	17 c0       	rjmp	.+46     	; 0x20c <EE_byte_write+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1de:	6f 81       	ldd	r22, Y+7	; 0x07
     1e0:	78 85       	ldd	r23, Y+8	; 0x08
     1e2:	89 85       	ldd	r24, Y+9	; 0x09
     1e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     1e6:	0e 94 2d 04 	call	0x85a	; 0x85a <__fixunssfsi>
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
     1ee:	9c 87       	std	Y+12, r25	; 0x0c
     1f0:	8b 87       	std	Y+11, r24	; 0x0b
     1f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     1f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     1f6:	98 8b       	std	Y+16, r25	; 0x10
     1f8:	8f 87       	std	Y+15, r24	; 0x0f
     1fa:	8f 85       	ldd	r24, Y+15	; 0x0f
     1fc:	98 89       	ldd	r25, Y+16	; 0x10
     1fe:	8c 01       	movw	r16, r24
     200:	c8 01       	movw	r24, r16
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <EE_byte_write+0x158>
     206:	8c 01       	movw	r16, r24
     208:	18 8b       	std	Y+16, r17	; 0x10
     20a:	0f 87       	std	Y+15, r16	; 0x0f

_delay_ms(100);	                                       //delay for internal write cycle of EEPROM
}
     20c:	64 96       	adiw	r28, 0x14	; 20
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	de bf       	out	0x3e, r29	; 62
     214:	0f be       	out	0x3f, r0	; 63
     216:	cd bf       	out	0x3d, r28	; 61
     218:	cf 91       	pop	r28
     21a:	df 91       	pop	r29
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	08 95       	ret

00000222 <EE_byte_read>:
/*******************Reads data from single byte function returs read data*********************/
unsigned char EE_byte_read(unsigned int page,unsigned char byte)
{
     222:	df 93       	push	r29
     224:	cf 93       	push	r28
     226:	00 d0       	rcall	.+0      	; 0x228 <EE_byte_read+0x6>
     228:	00 d0       	rcall	.+0      	; 0x22a <EE_byte_read+0x8>
     22a:	00 d0       	rcall	.+0      	; 0x22c <EE_byte_read+0xa>
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	9d 83       	std	Y+5, r25	; 0x05
     232:	8c 83       	std	Y+4, r24	; 0x04
     234:	6e 83       	std	Y+6, r22	; 0x06
unsigned int byte_adress;                             //byte address 
unsigned char data;
byte_adress=(page*128)+byte;                         //generates  16 bit byte address from page num and byte number
     236:	8c 81       	ldd	r24, Y+4	; 0x04
     238:	9d 81       	ldd	r25, Y+5	; 0x05
     23a:	9c 01       	movw	r18, r24
     23c:	36 95       	lsr	r19
     23e:	32 2f       	mov	r19, r18
     240:	22 27       	eor	r18, r18
     242:	37 95       	ror	r19
     244:	27 95       	ror	r18
     246:	8e 81       	ldd	r24, Y+6	; 0x06
     248:	88 2f       	mov	r24, r24
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	9a 83       	std	Y+2, r25	; 0x02
     252:	89 83       	std	Y+1, r24	; 0x01
TWI_start();
     254:	0e 94 75 03 	call	0x6ea	; 0x6ea <TWI_start>
EE_write_mode();                                     //access in write mode
     258:	0e 94 41 00 	call	0x82	; 0x82 <EE_write_mode>
TWI_send(byte_adress>>8);                            //MSB of byte address(data word address)
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	9a 81       	ldd	r25, Y+2	; 0x02
     260:	89 2f       	mov	r24, r25
     262:	99 27       	eor	r25, r25
     264:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
TWI_send(byte_adress);                              //LSB of byte address(data word address)
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
													
TWI_start();                                        //restart TWI
     26e:	0e 94 75 03 	call	0x6ea	; 0x6ea <TWI_start>
EE_read_mode();                                     //access in read mode
     272:	0e 94 4b 00 	call	0x96	; 0x96 <EE_read_mode>
data=TWI_read_nack();                               //read with NACK
     276:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <TWI_read_nack>
     27a:	8b 83       	std	Y+3, r24	; 0x03
TWI_stop();	                                        //stops TWI
     27c:	0e 94 88 03 	call	0x710	; 0x710 <TWI_stop>
write_uart(data);                                   //writes the data to uart
     280:	8b 81       	ldd	r24, Y+3	; 0x03
     282:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
return data;
     286:	8b 81       	ldd	r24, Y+3	; 0x03
}
     288:	26 96       	adiw	r28, 0x06	; 6
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	de bf       	out	0x3e, r29	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	cd bf       	out	0x3d, r28	; 61
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	08 95       	ret

0000029a <EE_page_write>:
/*************************receive data from keyboard and write to page until enter button pressed************/
void EE_page_write(unsigned int page)
{
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	df 93       	push	r29
     2a0:	cf 93       	push	r28
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	64 97       	sbiw	r28, 0x14	; 20
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	cd bf       	out	0x3d, r28	; 61
     2b2:	9c 8b       	std	Y+20, r25	; 0x14
     2b4:	8b 8b       	std	Y+19, r24	; 0x13
unsigned int byte_adress;                            //byte address 
unsigned char i=0,data;
     2b6:	19 82       	std	Y+1, r1	; 0x01
byte_adress=page*128;                                 //generates  16 bit byte address from page num
     2b8:	8b 89       	ldd	r24, Y+19	; 0x13
     2ba:	9c 89       	ldd	r25, Y+20	; 0x14
     2bc:	96 95       	lsr	r25
     2be:	98 2f       	mov	r25, r24
     2c0:	88 27       	eor	r24, r24
     2c2:	97 95       	ror	r25
     2c4:	87 95       	ror	r24
     2c6:	9c 83       	std	Y+4, r25	; 0x04
     2c8:	8b 83       	std	Y+3, r24	; 0x03
TWI_start();
     2ca:	0e 94 75 03 	call	0x6ea	; 0x6ea <TWI_start>
EE_write_mode();                                     //access in write mode
     2ce:	0e 94 41 00 	call	0x82	; 0x82 <EE_write_mode>
TWI_send(byte_adress>>8);                            //MSB of byte address(data word address)
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	9c 81       	ldd	r25, Y+4	; 0x04
     2d6:	89 2f       	mov	r24, r25
     2d8:	99 27       	eor	r25, r25
     2da:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
TWI_send(byte_adress);                               //LSB of byte address(data word address)
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
write_uart_strg("\n\rPress Enter after data entry\r\n"); 
     2e4:	80 e6       	ldi	r24, 0x60	; 96
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
while((data!='\r')&&(i<128))                        //enter data from keyboard until enter button pressed 
     2ec:	09 c0       	rjmp	.+18     	; 0x300 <EE_page_write+0x66>
{                                                   //or number of characters reached 128
data=read_uart();
     2ee:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     2f2:	8a 83       	std	Y+2, r24	; 0x02
//write_uart(data);                                //uncommenting can check whether entered character is right
TWI_send(data);                                    //writes to eeprom
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
i++;	
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	8f 5f       	subi	r24, 0xFF	; 255
     2fe:	89 83       	std	Y+1, r24	; 0x01
TWI_start();
EE_write_mode();                                     //access in write mode
TWI_send(byte_adress>>8);                            //MSB of byte address(data word address)
TWI_send(byte_adress);                               //LSB of byte address(data word address)
write_uart_strg("\n\rPress Enter after data entry\r\n"); 
while((data!='\r')&&(i<128))                        //enter data from keyboard until enter button pressed 
     300:	8a 81       	ldd	r24, Y+2	; 0x02
     302:	8d 30       	cpi	r24, 0x0D	; 13
     304:	19 f0       	breq	.+6      	; 0x30c <EE_page_write+0x72>
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	88 23       	and	r24, r24
     30a:	8c f7       	brge	.-30     	; 0x2ee <EE_page_write+0x54>
data=read_uart();
//write_uart(data);                                //uncommenting can check whether entered character is right
TWI_send(data);                                    //writes to eeprom
i++;	
}
TWI_stop();                                        //TWI stop
     30c:	0e 94 88 03 	call	0x710	; 0x710 <TWI_stop>
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	a8 ec       	ldi	r26, 0xC8	; 200
     316:	b2 e4       	ldi	r27, 0x42	; 66
     318:	8d 83       	std	Y+5, r24	; 0x05
     31a:	9e 83       	std	Y+6, r25	; 0x06
     31c:	af 83       	std	Y+7, r26	; 0x07
     31e:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     320:	6d 81       	ldd	r22, Y+5	; 0x05
     322:	7e 81       	ldd	r23, Y+6	; 0x06
     324:	8f 81       	ldd	r24, Y+7	; 0x07
     326:	98 85       	ldd	r25, Y+8	; 0x08
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	4a e7       	ldi	r20, 0x7A	; 122
     32e:	55 e4       	ldi	r21, 0x45	; 69
     330:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	89 87       	std	Y+9, r24	; 0x09
     33a:	9a 87       	std	Y+10, r25	; 0x0a
     33c:	ab 87       	std	Y+11, r26	; 0x0b
     33e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     340:	11 e0       	ldi	r17, 0x01	; 1
     342:	69 85       	ldd	r22, Y+9	; 0x09
     344:	7a 85       	ldd	r23, Y+10	; 0x0a
     346:	8b 85       	ldd	r24, Y+11	; 0x0b
     348:	9c 85       	ldd	r25, Y+12	; 0x0c
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e8       	ldi	r20, 0x80	; 128
     350:	5f e3       	ldi	r21, 0x3F	; 63
     352:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__ltsf2>
     356:	88 23       	and	r24, r24
     358:	0c f0       	brlt	.+2      	; 0x35c <EE_page_write+0xc2>
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	11 23       	and	r17, r17
     35e:	29 f0       	breq	.+10     	; 0x36a <EE_page_write+0xd0>
		__ticks = 1;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	9e 87       	std	Y+14, r25	; 0x0e
     366:	8d 87       	std	Y+13, r24	; 0x0d
     368:	46 c0       	rjmp	.+140    	; 0x3f6 <EE_page_write+0x15c>
	else if (__tmp > 65535)
     36a:	11 e0       	ldi	r17, 0x01	; 1
     36c:	69 85       	ldd	r22, Y+9	; 0x09
     36e:	7a 85       	ldd	r23, Y+10	; 0x0a
     370:	8b 85       	ldd	r24, Y+11	; 0x0b
     372:	9c 85       	ldd	r25, Y+12	; 0x0c
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	3f ef       	ldi	r19, 0xFF	; 255
     378:	4f e7       	ldi	r20, 0x7F	; 127
     37a:	57 e4       	ldi	r21, 0x47	; 71
     37c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__gtsf2>
     380:	18 16       	cp	r1, r24
     382:	0c f0       	brlt	.+2      	; 0x386 <EE_page_write+0xec>
     384:	10 e0       	ldi	r17, 0x00	; 0
     386:	11 23       	and	r17, r17
     388:	61 f1       	breq	.+88     	; 0x3e2 <EE_page_write+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     38a:	6d 81       	ldd	r22, Y+5	; 0x05
     38c:	7e 81       	ldd	r23, Y+6	; 0x06
     38e:	8f 81       	ldd	r24, Y+7	; 0x07
     390:	98 85       	ldd	r25, Y+8	; 0x08
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e2       	ldi	r20, 0x20	; 32
     398:	51 e4       	ldi	r21, 0x41	; 65
     39a:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
     39e:	dc 01       	movw	r26, r24
     3a0:	cb 01       	movw	r24, r22
     3a2:	bc 01       	movw	r22, r24
     3a4:	cd 01       	movw	r24, r26
     3a6:	0e 94 2d 04 	call	0x85a	; 0x85a <__fixunssfsi>
     3aa:	dc 01       	movw	r26, r24
     3ac:	cb 01       	movw	r24, r22
     3ae:	9e 87       	std	Y+14, r25	; 0x0e
     3b0:	8d 87       	std	Y+13, r24	; 0x0d
     3b2:	12 c0       	rjmp	.+36     	; 0x3d8 <EE_page_write+0x13e>
     3b4:	80 e9       	ldi	r24, 0x90	; 144
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	98 8b       	std	Y+16, r25	; 0x10
     3ba:	8f 87       	std	Y+15, r24	; 0x0f
     3bc:	8f 85       	ldd	r24, Y+15	; 0x0f
     3be:	98 89       	ldd	r25, Y+16	; 0x10
     3c0:	8c 01       	movw	r16, r24
     3c2:	c8 01       	movw	r24, r16
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <EE_page_write+0x12a>
     3c8:	8c 01       	movw	r16, r24
     3ca:	18 8b       	std	Y+16, r17	; 0x10
     3cc:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     3d0:	9e 85       	ldd	r25, Y+14	; 0x0e
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	9e 87       	std	Y+14, r25	; 0x0e
     3d6:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     3da:	9e 85       	ldd	r25, Y+14	; 0x0e
     3dc:	00 97       	sbiw	r24, 0x00	; 0
     3de:	51 f7       	brne	.-44     	; 0x3b4 <EE_page_write+0x11a>
     3e0:	17 c0       	rjmp	.+46     	; 0x410 <EE_page_write+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3e2:	69 85       	ldd	r22, Y+9	; 0x09
     3e4:	7a 85       	ldd	r23, Y+10	; 0x0a
     3e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3ea:	0e 94 2d 04 	call	0x85a	; 0x85a <__fixunssfsi>
     3ee:	dc 01       	movw	r26, r24
     3f0:	cb 01       	movw	r24, r22
     3f2:	9e 87       	std	Y+14, r25	; 0x0e
     3f4:	8d 87       	std	Y+13, r24	; 0x0d
     3f6:	8d 85       	ldd	r24, Y+13	; 0x0d
     3f8:	9e 85       	ldd	r25, Y+14	; 0x0e
     3fa:	9a 8b       	std	Y+18, r25	; 0x12
     3fc:	89 8b       	std	Y+17, r24	; 0x11
     3fe:	89 89       	ldd	r24, Y+17	; 0x11
     400:	9a 89       	ldd	r25, Y+18	; 0x12
     402:	8c 01       	movw	r16, r24
     404:	c8 01       	movw	r24, r16
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <EE_page_write+0x16c>
     40a:	8c 01       	movw	r16, r24
     40c:	1a 8b       	std	Y+18, r17	; 0x12
     40e:	09 8b       	std	Y+17, r16	; 0x11
_delay_ms(100);	                                   //internal write cycle
}
     410:	64 96       	adiw	r28, 0x14	; 20
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	cf 91       	pop	r28
     41e:	df 91       	pop	r29
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	08 95       	ret

00000426 <EE_page_read>:

/*********************reads data from a page until last valid data enterd or 128 characters reached ie,page ends***************/
void EE_page_read(unsigned int page)
{	
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	00 d0       	rcall	.+0      	; 0x42c <EE_page_read+0x6>
     42c:	00 d0       	rcall	.+0      	; 0x42e <EE_page_read+0x8>
     42e:	00 d0       	rcall	.+0      	; 0x430 <EE_page_read+0xa>
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	9e 83       	std	Y+6, r25	; 0x06
     436:	8d 83       	std	Y+5, r24	; 0x05
unsigned int byte_adress;                           //byte address 
unsigned char data,i=0;
     438:	1a 82       	std	Y+2, r1	; 0x02
byte_adress=(page*128);                              //generates  16 bit byte address from page num
     43a:	8d 81       	ldd	r24, Y+5	; 0x05
     43c:	9e 81       	ldd	r25, Y+6	; 0x06
     43e:	96 95       	lsr	r25
     440:	98 2f       	mov	r25, r24
     442:	88 27       	eor	r24, r24
     444:	97 95       	ror	r25
     446:	87 95       	ror	r24
     448:	9c 83       	std	Y+4, r25	; 0x04
     44a:	8b 83       	std	Y+3, r24	; 0x03
TWI_start();
     44c:	0e 94 75 03 	call	0x6ea	; 0x6ea <TWI_start>
EE_write_mode();                                     //access in write mode
     450:	0e 94 41 00 	call	0x82	; 0x82 <EE_write_mode>
TWI_send(byte_adress>>8);                            //MSB of byte address(data word address)
     454:	8b 81       	ldd	r24, Y+3	; 0x03
     456:	9c 81       	ldd	r25, Y+4	; 0x04
     458:	89 2f       	mov	r24, r25
     45a:	99 27       	eor	r25, r25
     45c:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
TWI_send(byte_adress);                               //LSB of byte address(data word address)
     460:	8b 81       	ldd	r24, Y+3	; 0x03
     462:	0e 94 94 03 	call	0x728	; 0x728 <TWI_send>
TWI_start();                                          //restart TWI
     466:	0e 94 75 03 	call	0x6ea	; 0x6ea <TWI_start>
EE_read_mode();                                       //access in read mode   
     46a:	0e 94 4b 00 	call	0x96	; 0x96 <EE_read_mode>
while((data!='\r')&&(i<128))                         //read data from eeprom until last data 
     46e:	09 c0       	rjmp	.+18     	; 0x482 <EE_page_read+0x5c>
{                                                    //or number of characters reached 128
data=TWI_read_ack();
     470:	0e 94 3f 03 	call	0x67e	; 0x67e <TWI_read_ack>
     474:	89 83       	std	Y+1, r24	; 0x01
write_uart(data);                                   //writes the data to uart
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
i++;	
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	8f 5f       	subi	r24, 0xFF	; 255
     480:	8a 83       	std	Y+2, r24	; 0x02
EE_write_mode();                                     //access in write mode
TWI_send(byte_adress>>8);                            //MSB of byte address(data word address)
TWI_send(byte_adress);                               //LSB of byte address(data word address)
TWI_start();                                          //restart TWI
EE_read_mode();                                       //access in read mode   
while((data!='\r')&&(i<128))                         //read data from eeprom until last data 
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	8d 30       	cpi	r24, 0x0D	; 13
     486:	19 f0       	breq	.+6      	; 0x48e <EE_page_read+0x68>
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	88 23       	and	r24, r24
     48c:	8c f7       	brge	.-30     	; 0x470 <EE_page_read+0x4a>
{                                                    //or number of characters reached 128
data=TWI_read_ack();
write_uart(data);                                   //writes the data to uart
i++;	
}
data=TWI_read_nack();                                //last read data
     48e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <TWI_read_nack>
     492:	89 83       	std	Y+1, r24	; 0x01
TWI_stop();                                          //stops TWI
     494:	0e 94 88 03 	call	0x710	; 0x710 <TWI_stop>
}
     498:	26 96       	adiw	r28, 0x06	; 6
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	cf 91       	pop	r28
     4a6:	df 91       	pop	r29
     4a8:	08 95       	ret

000004aa <main>:

/************************** MAIN ***************************/
int main(void)
{
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <main+0x6>
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <main+0x8>
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <main+0xa>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
	unsigned char choice,choice1,choice2,page,byte,data;
    uart_initialize();              //initializes the uart
     4b8:	0e 94 af 03 	call	0x75e	; 0x75e <uart_initialize>
	TWI_init();                     //initialize TWI
     4bc:	0e 94 33 03 	call	0x666	; 0x666 <TWI_init>
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <main+0x22>
		
	}	
		
		
		
	}
     4c2:	00 00       	nop
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <main+0x22>
     4c6:	00 00       	nop
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <main+0x22>
     4ca:	00 00       	nop
	TWI_init();                     //initialize TWI
	while(1)
	{
		
		
	choice=0;choice1=0;choice2=0;	
     4cc:	19 82       	std	Y+1, r1	; 0x01
     4ce:	1a 82       	std	Y+2, r1	; 0x02
     4d0:	1b 82       	std	Y+3, r1	; 0x03
		
	write_uart_strg("SELECT YOUR CHOICES ACCORDING TO THE PROMPT\n\r1.EEPROM Write\n\r2.EEPROM Read\r\n");                     //Enter whether write or read
     4d2:	81 e8       	ldi	r24, 0x81	; 129
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
	choice=read_uart();
     4da:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     4de:	89 83       	std	Y+1, r24	; 0x01
	write_uart(choice);
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
	write_uart_strg(". Selected\r\n");
     4e6:	8e ec       	ldi	r24, 0xCE	; 206
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
	if(choice=='1')                                              //if write selected
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	81 33       	cpi	r24, 0x31	; 49
     4f2:	09 f0       	breq	.+2      	; 0x4f6 <main+0x4c>
     4f4:	5c c0       	rjmp	.+184    	; 0x5ae <main+0x104>
	{
		write_uart_strg("\n\r1.Byte write\n\r2.Page write\r\n");     //enter whether byte write or page write
     4f6:	8b ed       	ldi	r24, 0xDB	; 219
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
		choice1=read_uart();
     4fe:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     502:	8a 83       	std	Y+2, r24	; 0x02
    	write_uart(choice1);
     504:	8a 81       	ldd	r24, Y+2	; 0x02
     506:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
		write_uart_strg(". Selected\r\n");     //enter whether byte write or page write
     50a:	8e ec       	ldi	r24, 0xCE	; 206
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
		
		if(choice1=='1')                                        //if byte write selected
     512:	8a 81       	ldd	r24, Y+2	; 0x02
     514:	81 33       	cpi	r24, 0x31	; 49
     516:	79 f5       	brne	.+94     	; 0x576 <main+0xcc>
		{   
			write_uart_strg("\n\rEnter page no & byte\r\n");        //enter the page number and number of byte
     518:	8a ef       	ldi	r24, 0xFA	; 250
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			write_uart_strg("Page No:\t");
     520:	83 e1       	ldi	r24, 0x13	; 19
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			page=read_uart();
     528:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     52c:	8c 83       	std	Y+4, r24	; 0x04
			write_uart(page);
     52e:	8c 81       	ldd	r24, Y+4	; 0x04
     530:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
			write_uart_strg("\r\n");
     534:	8d e1       	ldi	r24, 0x1D	; 29
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			write_uart_strg("Byte:\t");
     53c:	80 e2       	ldi	r24, 0x20	; 32
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			byte=read_uart();                                   //read the page number and number of byte
     544:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     548:	8d 83       	std	Y+5, r24	; 0x05
			write_uart(byte);
     54a:	8d 81       	ldd	r24, Y+5	; 0x05
     54c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
			write_uart_strg("\r\n");
     550:	8d e1       	ldi	r24, 0x1D	; 29
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			write_uart_strg("\n\rEnter data\r\n");                  //enter data
     558:	87 e2       	ldi	r24, 0x27	; 39
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			data=read_uart();
     560:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     564:	8e 83       	std	Y+6, r24	; 0x06
			EE_byte_write(page,byte,data);                      //function to write byte to the eeprom
     566:	8c 81       	ldd	r24, Y+4	; 0x04
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	6d 81       	ldd	r22, Y+5	; 0x05
     56e:	4e 81       	ldd	r20, Y+6	; 0x06
     570:	0e 94 55 00 	call	0xaa	; 0xaa <EE_byte_write>
		
	}	
		
		
		
	}
     574:	ab cf       	rjmp	.-170    	; 0x4cc <main+0x22>
			write_uart_strg("\n\rEnter data\r\n");                  //enter data
			data=read_uart();
			EE_byte_write(page,byte,data);                      //function to write byte to the eeprom
		}
		
		else if(choice1=='2')                                    //if page write selected
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	82 33       	cpi	r24, 0x32	; 50
     57a:	09 f0       	breq	.+2      	; 0x57e <main+0xd4>
     57c:	a2 cf       	rjmp	.-188    	; 0x4c2 <main+0x18>
		{
		
			write_uart_strg("\n\rEnter page no:\t");               //read the page number 
     57e:	86 e3       	ldi	r24, 0x36	; 54
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			page=read_uart();
     586:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     58a:	8c 83       	std	Y+4, r24	; 0x04
			write_uart(page);
     58c:	8c 81       	ldd	r24, Y+4	; 0x04
     58e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
			write_uart_strg("\r\n");
     592:	8d e1       	ldi	r24, 0x1D	; 29
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			EE_page_write(page);                                 //function to write data from keyboad to the eeprom page
     59a:	8c 81       	ldd	r24, Y+4	; 0x04
     59c:	88 2f       	mov	r24, r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 4d 01 	call	0x29a	; 0x29a <EE_page_write>
			write_uart_strg("\r\n");
     5a4:	8d e1       	ldi	r24, 0x1D	; 29
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
		
	}	
		
		
		
	}
     5ac:	8f cf       	rjmp	.-226    	; 0x4cc <main+0x22>
			write_uart_strg("\r\n");
		}
		
	}
	
	else if(choice=='2')                                              //if read selected
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	82 33       	cpi	r24, 0x32	; 50
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <main+0x10c>
     5b4:	88 cf       	rjmp	.-240    	; 0x4c6 <main+0x1c>
	{
		write_uart_strg("\n\r1.Byte read\n\r2.Page read\r\n");           //enter whether byte read or page read
     5b6:	88 e4       	ldi	r24, 0x48	; 72
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
		choice2=read_uart();
     5be:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     5c2:	8b 83       	std	Y+3, r24	; 0x03
		write_uart(choice2);
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
		write_uart_strg(". Selected\r\n");
     5ca:	8e ec       	ldi	r24, 0xCE	; 206
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
		
		if(choice2=='1')                                             //if byte read selected
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	81 33       	cpi	r24, 0x31	; 49
     5d6:	59 f5       	brne	.+86     	; 0x62e <main+0x184>
		{
			write_uart_strg("\n\rEnter page no & byte\r\n");            //enter the page number and number of byte
     5d8:	8a ef       	ldi	r24, 0xFA	; 250
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			write_uart_strg("Page No:\t");
     5e0:	83 e1       	ldi	r24, 0x13	; 19
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			page=read_uart();
     5e8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     5ec:	8c 83       	std	Y+4, r24	; 0x04
			write_uart(page);
     5ee:	8c 81       	ldd	r24, Y+4	; 0x04
     5f0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
			write_uart_strg("\r\n");
     5f4:	8d e1       	ldi	r24, 0x1D	; 29
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			write_uart_strg("Byte:\t");
     5fc:	80 e2       	ldi	r24, 0x20	; 32
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			byte=read_uart();                                   //read the page number and number of byte
     604:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     608:	8d 83       	std	Y+5, r24	; 0x05
			write_uart(byte);
     60a:	8d 81       	ldd	r24, Y+5	; 0x05
     60c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
			write_uart_strg("\r\nResult:");
     610:	85 e6       	ldi	r24, 0x65	; 101
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			EE_byte_read(page,byte);                                  //function to read  byte from the eeprom
     618:	8c 81       	ldd	r24, Y+4	; 0x04
     61a:	88 2f       	mov	r24, r24
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	6d 81       	ldd	r22, Y+5	; 0x05
     620:	0e 94 11 01 	call	0x222	; 0x222 <EE_byte_read>
			write_uart_strg("\r\n");
     624:	8d e1       	ldi	r24, 0x1D	; 29
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
		
	}	
		
		
		
	}
     62c:	4f cf       	rjmp	.-354    	; 0x4cc <main+0x22>
			write_uart(byte);
			write_uart_strg("\r\nResult:");
			EE_byte_read(page,byte);                                  //function to read  byte from the eeprom
			write_uart_strg("\r\n");
		}
		else if(choice2=='2')                                        //if page read selected
     62e:	8b 81       	ldd	r24, Y+3	; 0x03
     630:	82 33       	cpi	r24, 0x32	; 50
     632:	09 f0       	breq	.+2      	; 0x636 <main+0x18c>
     634:	4a cf       	rjmp	.-364    	; 0x4ca <main+0x20>
		{   
			write_uart_strg("\n\rEnter page no:\t");
     636:	86 e3       	ldi	r24, 0x36	; 54
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			page=read_uart();
     63e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <read_uart>
     642:	8c 83       	std	Y+4, r24	; 0x04
			write_uart(page);
     644:	8c 81       	ldd	r24, Y+4	; 0x04
     646:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
			write_uart_strg("\r\nResult: \t");
     64a:	8f e6       	ldi	r24, 0x6F	; 111
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
			EE_page_read(page);                                     //function to read data from eeprom  page
     652:	8c 81       	ldd	r24, Y+4	; 0x04
     654:	88 2f       	mov	r24, r24
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 13 02 	call	0x426	; 0x426 <EE_page_read>
			write_uart_strg("\r\n");
     65c:	8d e1       	ldi	r24, 0x1D	; 29
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 0f 04 	call	0x81e	; 0x81e <write_uart_strg>
		
	}	
		
		
		
	}
     664:	33 cf       	rjmp	.-410    	; 0x4cc <main+0x22>

00000666 <TWI_init>:

#include <avr/io.h>
void TWI_init()                                      //TWI initialization with desired SCL frequency
{
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
	TWBR=32;
     66e:	80 e2       	ldi	r24, 0x20	; 32
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	20 e2       	ldi	r18, 0x20	; 32
     674:	fc 01       	movw	r30, r24
     676:	20 83       	st	Z, r18
	
}
     678:	cf 91       	pop	r28
     67a:	df 91       	pop	r29
     67c:	08 95       	ret

0000067e <TWI_read_ack>:

unsigned char TWI_read_ack()                        //TWI recieve data with ack
{
     67e:	df 93       	push	r29
     680:	cf 93       	push	r28
     682:	0f 92       	push	r0
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	TWCR=0xC4;                                          //clear flag and TWIE set
     688:	86 e5       	ldi	r24, 0x56	; 86
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	24 ec       	ldi	r18, 0xC4	; 196
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
	while(!(TWCR&(1<<TWINT)));                          //wait until the flag sets ie end of recieve condition
     692:	00 00       	nop
     694:	86 e5       	ldi	r24, 0x56	; 86
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	fc 01       	movw	r30, r24
     69a:	80 81       	ld	r24, Z
     69c:	88 23       	and	r24, r24
     69e:	d4 f7       	brge	.-12     	; 0x694 <TWI_read_ack+0x16>
	data=TWDR;                                           //read data
     6a0:	83 e2       	ldi	r24, 0x23	; 35
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	fc 01       	movw	r30, r24
     6a6:	80 81       	ld	r24, Z
     6a8:	89 83       	std	Y+1, r24	; 0x01
	return data;
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
}
     6ac:	0f 90       	pop	r0
     6ae:	cf 91       	pop	r28
     6b0:	df 91       	pop	r29
     6b2:	08 95       	ret

000006b4 <TWI_read_nack>:

unsigned char TWI_read_nack()                    //TWI recive last byte with NACK
{
     6b4:	df 93       	push	r29
     6b6:	cf 93       	push	r28
     6b8:	0f 92       	push	r0
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	TWCR=0x84;                                 //clear flag and TWIE set
     6be:	86 e5       	ldi	r24, 0x56	; 86
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	24 e8       	ldi	r18, 0x84	; 132
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
	while(!(TWCR&(1<<TWINT)));                 //wait until the flag sets ie end of recieve condition
     6c8:	00 00       	nop
     6ca:	86 e5       	ldi	r24, 0x56	; 86
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	88 23       	and	r24, r24
     6d4:	d4 f7       	brge	.-12     	; 0x6ca <TWI_read_nack+0x16>
	data=TWDR;                                 //read data
     6d6:	83 e2       	ldi	r24, 0x23	; 35
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	fc 01       	movw	r30, r24
     6dc:	80 81       	ld	r24, Z
     6de:	89 83       	std	Y+1, r24	; 0x01
	return data;
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
}
     6e2:	0f 90       	pop	r0
     6e4:	cf 91       	pop	r28
     6e6:	df 91       	pop	r29
     6e8:	08 95       	ret

000006ea <TWI_start>:

void TWI_start()                                    //generate a start condition on the TWI bus
{
     6ea:	df 93       	push	r29
     6ec:	cf 93       	push	r28
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
	TWCR=0xA4;                                         //value to be loaded to clear TWINT flag and start START condition
     6f2:	86 e5       	ldi	r24, 0x56	; 86
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	24 ea       	ldi	r18, 0xA4	; 164
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
	while(!(TWCR&(1<<TWINT)));                         //wait until the flag sets ie end of start condition
     6fc:	00 00       	nop
     6fe:	86 e5       	ldi	r24, 0x56	; 86
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	fc 01       	movw	r30, r24
     704:	80 81       	ld	r24, Z
     706:	88 23       	and	r24, r24
     708:	d4 f7       	brge	.-12     	; 0x6fe <TWI_start+0x14>
}
     70a:	cf 91       	pop	r28
     70c:	df 91       	pop	r29
     70e:	08 95       	ret

00000710 <TWI_stop>:

void TWI_stop()
{
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
	TWCR=0x94;                                         //value to be loaded to clear TWINT flag and start STOP condition
     718:	86 e5       	ldi	r24, 0x56	; 86
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	24 e9       	ldi	r18, 0x94	; 148
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
	//while(!(TWCR&(1<<TWINT)));                         //wait until the flag sets ie end of stop condition
}
     722:	cf 91       	pop	r28
     724:	df 91       	pop	r29
     726:	08 95       	ret

00000728 <TWI_send>:

void TWI_send(unsigned char data)                 //sends data into the slave
{
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	0f 92       	push	r0
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;                                        //data to be sent
     734:	83 e2       	ldi	r24, 0x23	; 35
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	29 81       	ldd	r18, Y+1	; 0x01
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18
	TWCR=0x84;                                        //interrupt flag is cleared
     73e:	86 e5       	ldi	r24, 0x56	; 86
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	24 e8       	ldi	r18, 0x84	; 132
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
	while(!(TWCR&(1<<TWINT)));	                      //wait until flag sets
     748:	00 00       	nop
     74a:	86 e5       	ldi	r24, 0x56	; 86
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	fc 01       	movw	r30, r24
     750:	80 81       	ld	r24, Z
     752:	88 23       	and	r24, r24
     754:	d4 f7       	brge	.-12     	; 0x74a <TWI_send+0x22>
	//TWCR=0x84;
     756:	0f 90       	pop	r0
     758:	cf 91       	pop	r28
     75a:	df 91       	pop	r29
     75c:	08 95       	ret

0000075e <uart_initialize>:
#include <avr/io.h>
void uart_initialize()
{
     75e:	df 93       	push	r29
     760:	cf 93       	push	r28
     762:	00 d0       	rcall	.+0      	; 0x764 <uart_initialize+0x6>
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
	unsigned int baudrate_value=103;
     768:	87 e6       	ldi	r24, 0x67	; 103
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	9a 83       	std	Y+2, r25	; 0x02
     76e:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=baudrate_value;                             //Loading the baud rate generator registers
     770:	89 e2       	ldi	r24, 0x29	; 41
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	29 81       	ldd	r18, Y+1	; 0x01
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
	UBRRH=(baudrate_value>>8);
     77a:	80 e4       	ldi	r24, 0x40	; 64
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	29 81       	ldd	r18, Y+1	; 0x01
     780:	3a 81       	ldd	r19, Y+2	; 0x02
     782:	23 2f       	mov	r18, r19
     784:	33 27       	eor	r19, r19
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18

	UCSRB=(1<<TXEN)|(1<<RXEN);                       //Enabling transmission and reception
     78a:	8a e2       	ldi	r24, 0x2A	; 42
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	28 e1       	ldi	r18, 0x18	; 24
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18

	UCSRC=(1<<URSEL)|(3<<UCSZ0);                    //accessing the UCSRC register and selecting 8 bit data format
     794:	80 e4       	ldi	r24, 0x40	; 64
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	26 e8       	ldi	r18, 0x86	; 134
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
}
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	08 95       	ret

000007a8 <write_uart>:

void write_uart(unsigned char data)
{
     7a8:	df 93       	push	r29
     7aa:	cf 93       	push	r28
     7ac:	0f 92       	push	r0
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA&(1<<UDRE)));
     7b4:	00 00       	nop
     7b6:	8b e2       	ldi	r24, 0x2B	; 43
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 81       	ld	r24, Z
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	80 72       	andi	r24, 0x20	; 32
     7c4:	90 70       	andi	r25, 0x00	; 0
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	b1 f3       	breq	.-20     	; 0x7b6 <write_uart+0xe>
	UDR=data;
     7ca:	8c e2       	ldi	r24, 0x2C	; 44
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	29 81       	ldd	r18, Y+1	; 0x01
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
	while(!(UCSRA&(1<<TXC)));
     7d4:	00 00       	nop
     7d6:	8b e2       	ldi	r24, 0x2B	; 43
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	fc 01       	movw	r30, r24
     7dc:	80 81       	ld	r24, Z
     7de:	88 2f       	mov	r24, r24
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	80 74       	andi	r24, 0x40	; 64
     7e4:	90 70       	andi	r25, 0x00	; 0
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	b1 f3       	breq	.-20     	; 0x7d6 <write_uart+0x2e>
}
     7ea:	0f 90       	pop	r0
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <read_uart>:

unsigned char read_uart()
{
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	0f 92       	push	r0
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	while(!(UCSRA&(1<<RXC)));
     7fc:	00 00       	nop
     7fe:	8b e2       	ldi	r24, 0x2B	; 43
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	fc 01       	movw	r30, r24
     804:	80 81       	ld	r24, Z
     806:	88 23       	and	r24, r24
     808:	d4 f7       	brge	.-12     	; 0x7fe <read_uart+0xc>
	data=UDR;
     80a:	8c e2       	ldi	r24, 0x2C	; 44
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	fc 01       	movw	r30, r24
     810:	80 81       	ld	r24, Z
     812:	89 83       	std	Y+1, r24	; 0x01
	return data;
     814:	89 81       	ldd	r24, Y+1	; 0x01
}
     816:	0f 90       	pop	r0
     818:	cf 91       	pop	r28
     81a:	df 91       	pop	r29
     81c:	08 95       	ret

0000081e <write_uart_strg>:

void write_uart_strg(char *ptr)
{
     81e:	df 93       	push	r29
     820:	cf 93       	push	r28
     822:	00 d0       	rcall	.+0      	; 0x824 <write_uart_strg+0x6>
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
	while(*ptr)
     82c:	0b c0       	rjmp	.+22     	; 0x844 <write_uart_strg+0x26>
	{
		write_uart(*ptr);
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	fc 01       	movw	r30, r24
     834:	80 81       	ld	r24, Z
     836:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <write_uart>
		ptr++;
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	9a 81       	ldd	r25, Y+2	; 0x02
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	9a 83       	std	Y+2, r25	; 0x02
     842:	89 83       	std	Y+1, r24	; 0x01
	return data;
}

void write_uart_strg(char *ptr)
{
	while(*ptr)
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	9a 81       	ldd	r25, Y+2	; 0x02
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	88 23       	and	r24, r24
     84e:	79 f7       	brne	.-34     	; 0x82e <write_uart_strg+0x10>
	{
		write_uart(*ptr);
		ptr++;
	}
}
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	cf 91       	pop	r28
     856:	df 91       	pop	r29
     858:	08 95       	ret

0000085a <__fixunssfsi>:
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	7b 01       	movw	r14, r22
     864:	8c 01       	movw	r16, r24
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	5f e4       	ldi	r21, 0x4F	; 79
     86e:	0e 94 2b 07 	call	0xe56	; 0xe56 <__gesf2>
     872:	87 fd       	sbrc	r24, 7
     874:	11 c0       	rjmp	.+34     	; 0x898 <__stack+0x39>
     876:	c8 01       	movw	r24, r16
     878:	b7 01       	movw	r22, r14
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	5f e4       	ldi	r21, 0x4F	; 79
     882:	0e 94 d0 05 	call	0xba0	; 0xba0 <__subsf3>
     886:	0e 94 8b 07 	call	0xf16	; 0xf16 <__fixsfsi>
     88a:	9b 01       	movw	r18, r22
     88c:	ac 01       	movw	r20, r24
     88e:	20 50       	subi	r18, 0x00	; 0
     890:	30 40       	sbci	r19, 0x00	; 0
     892:	40 40       	sbci	r20, 0x00	; 0
     894:	50 48       	sbci	r21, 0x80	; 128
     896:	06 c0       	rjmp	.+12     	; 0x8a4 <__stack+0x45>
     898:	c8 01       	movw	r24, r16
     89a:	b7 01       	movw	r22, r14
     89c:	0e 94 8b 07 	call	0xf16	; 0xf16 <__fixsfsi>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	b9 01       	movw	r22, r18
     8a6:	ca 01       	movw	r24, r20
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	08 95       	ret

000008b2 <_fpadd_parts>:
     8b2:	a0 e0       	ldi	r26, 0x00	; 0
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	ef e5       	ldi	r30, 0x5F	; 95
     8b8:	f4 e0       	ldi	r31, 0x04	; 4
     8ba:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__prologue_saves__+0x8>
     8be:	fc 01       	movw	r30, r24
     8c0:	ea 01       	movw	r28, r20
     8c2:	80 81       	ld	r24, Z
     8c4:	82 30       	cpi	r24, 0x02	; 2
     8c6:	08 f4       	brcc	.+2      	; 0x8ca <_fpadd_parts+0x18>
     8c8:	38 c1       	rjmp	.+624    	; 0xb3a <_fpadd_parts+0x288>
     8ca:	db 01       	movw	r26, r22
     8cc:	9c 91       	ld	r25, X
     8ce:	92 30       	cpi	r25, 0x02	; 2
     8d0:	08 f4       	brcc	.+2      	; 0x8d4 <_fpadd_parts+0x22>
     8d2:	30 c1       	rjmp	.+608    	; 0xb34 <_fpadd_parts+0x282>
     8d4:	84 30       	cpi	r24, 0x04	; 4
     8d6:	59 f4       	brne	.+22     	; 0x8ee <_fpadd_parts+0x3c>
     8d8:	94 30       	cpi	r25, 0x04	; 4
     8da:	09 f0       	breq	.+2      	; 0x8de <_fpadd_parts+0x2c>
     8dc:	2e c1       	rjmp	.+604    	; 0xb3a <_fpadd_parts+0x288>
     8de:	91 81       	ldd	r25, Z+1	; 0x01
     8e0:	11 96       	adiw	r26, 0x01	; 1
     8e2:	8c 91       	ld	r24, X
     8e4:	11 97       	sbiw	r26, 0x01	; 1
     8e6:	98 17       	cp	r25, r24
     8e8:	09 f0       	breq	.+2      	; 0x8ec <_fpadd_parts+0x3a>
     8ea:	21 c1       	rjmp	.+578    	; 0xb2e <_fpadd_parts+0x27c>
     8ec:	26 c1       	rjmp	.+588    	; 0xb3a <_fpadd_parts+0x288>
     8ee:	94 30       	cpi	r25, 0x04	; 4
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <_fpadd_parts+0x42>
     8f2:	20 c1       	rjmp	.+576    	; 0xb34 <_fpadd_parts+0x282>
     8f4:	92 30       	cpi	r25, 0x02	; 2
     8f6:	b1 f4       	brne	.+44     	; 0x924 <_fpadd_parts+0x72>
     8f8:	82 30       	cpi	r24, 0x02	; 2
     8fa:	09 f0       	breq	.+2      	; 0x8fe <_fpadd_parts+0x4c>
     8fc:	1e c1       	rjmp	.+572    	; 0xb3a <_fpadd_parts+0x288>
     8fe:	ca 01       	movw	r24, r20
     900:	af 01       	movw	r20, r30
     902:	28 e0       	ldi	r18, 0x08	; 8
     904:	da 01       	movw	r26, r20
     906:	0d 90       	ld	r0, X+
     908:	ad 01       	movw	r20, r26
     90a:	dc 01       	movw	r26, r24
     90c:	0d 92       	st	X+, r0
     90e:	cd 01       	movw	r24, r26
     910:	21 50       	subi	r18, 0x01	; 1
     912:	c1 f7       	brne	.-16     	; 0x904 <_fpadd_parts+0x52>
     914:	db 01       	movw	r26, r22
     916:	11 96       	adiw	r26, 0x01	; 1
     918:	8c 91       	ld	r24, X
     91a:	11 97       	sbiw	r26, 0x01	; 1
     91c:	91 81       	ldd	r25, Z+1	; 0x01
     91e:	89 23       	and	r24, r25
     920:	89 83       	std	Y+1, r24	; 0x01
     922:	0a c1       	rjmp	.+532    	; 0xb38 <_fpadd_parts+0x286>
     924:	82 30       	cpi	r24, 0x02	; 2
     926:	09 f4       	brne	.+2      	; 0x92a <_fpadd_parts+0x78>
     928:	05 c1       	rjmp	.+522    	; 0xb34 <_fpadd_parts+0x282>
     92a:	c2 80       	ldd	r12, Z+2	; 0x02
     92c:	d3 80       	ldd	r13, Z+3	; 0x03
     92e:	db 01       	movw	r26, r22
     930:	12 96       	adiw	r26, 0x02	; 2
     932:	6d 90       	ld	r6, X+
     934:	7c 90       	ld	r7, X
     936:	13 97       	sbiw	r26, 0x03	; 3
     938:	24 81       	ldd	r18, Z+4	; 0x04
     93a:	35 81       	ldd	r19, Z+5	; 0x05
     93c:	46 81       	ldd	r20, Z+6	; 0x06
     93e:	57 81       	ldd	r21, Z+7	; 0x07
     940:	14 96       	adiw	r26, 0x04	; 4
     942:	ed 90       	ld	r14, X+
     944:	fd 90       	ld	r15, X+
     946:	0d 91       	ld	r16, X+
     948:	1c 91       	ld	r17, X
     94a:	17 97       	sbiw	r26, 0x07	; 7
     94c:	c6 01       	movw	r24, r12
     94e:	86 19       	sub	r24, r6
     950:	97 09       	sbc	r25, r7
     952:	5c 01       	movw	r10, r24
     954:	97 ff       	sbrs	r25, 7
     956:	04 c0       	rjmp	.+8      	; 0x960 <_fpadd_parts+0xae>
     958:	aa 24       	eor	r10, r10
     95a:	bb 24       	eor	r11, r11
     95c:	a8 1a       	sub	r10, r24
     95e:	b9 0a       	sbc	r11, r25
     960:	b0 e2       	ldi	r27, 0x20	; 32
     962:	ab 16       	cp	r10, r27
     964:	b1 04       	cpc	r11, r1
     966:	0c f0       	brlt	.+2      	; 0x96a <_fpadd_parts+0xb8>
     968:	61 c0       	rjmp	.+194    	; 0xa2c <_fpadd_parts+0x17a>
     96a:	18 16       	cp	r1, r24
     96c:	19 06       	cpc	r1, r25
     96e:	6c f5       	brge	.+90     	; 0x9ca <_fpadd_parts+0x118>
     970:	37 01       	movw	r6, r14
     972:	48 01       	movw	r8, r16
     974:	0a 2c       	mov	r0, r10
     976:	04 c0       	rjmp	.+8      	; 0x980 <_fpadd_parts+0xce>
     978:	96 94       	lsr	r9
     97a:	87 94       	ror	r8
     97c:	77 94       	ror	r7
     97e:	67 94       	ror	r6
     980:	0a 94       	dec	r0
     982:	d2 f7       	brpl	.-12     	; 0x978 <_fpadd_parts+0xc6>
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	0a 2c       	mov	r0, r10
     98e:	04 c0       	rjmp	.+8      	; 0x998 <_fpadd_parts+0xe6>
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	aa 1f       	adc	r26, r26
     996:	bb 1f       	adc	r27, r27
     998:	0a 94       	dec	r0
     99a:	d2 f7       	brpl	.-12     	; 0x990 <_fpadd_parts+0xde>
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	a1 09       	sbc	r26, r1
     9a0:	b1 09       	sbc	r27, r1
     9a2:	8e 21       	and	r24, r14
     9a4:	9f 21       	and	r25, r15
     9a6:	a0 23       	and	r26, r16
     9a8:	b1 23       	and	r27, r17
     9aa:	ee 24       	eor	r14, r14
     9ac:	ff 24       	eor	r15, r15
     9ae:	87 01       	movw	r16, r14
     9b0:	e3 94       	inc	r14
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	a1 05       	cpc	r26, r1
     9b6:	b1 05       	cpc	r27, r1
     9b8:	19 f4       	brne	.+6      	; 0x9c0 <_fpadd_parts+0x10e>
     9ba:	ee 24       	eor	r14, r14
     9bc:	ff 24       	eor	r15, r15
     9be:	87 01       	movw	r16, r14
     9c0:	e6 28       	or	r14, r6
     9c2:	f7 28       	or	r15, r7
     9c4:	08 29       	or	r16, r8
     9c6:	19 29       	or	r17, r9
     9c8:	3c c0       	rjmp	.+120    	; 0xa42 <_fpadd_parts+0x190>
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	d1 f1       	breq	.+116    	; 0xa42 <_fpadd_parts+0x190>
     9ce:	ca 0c       	add	r12, r10
     9d0:	db 1c       	adc	r13, r11
     9d2:	39 01       	movw	r6, r18
     9d4:	4a 01       	movw	r8, r20
     9d6:	0a 2c       	mov	r0, r10
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <_fpadd_parts+0x130>
     9da:	96 94       	lsr	r9
     9dc:	87 94       	ror	r8
     9de:	77 94       	ror	r7
     9e0:	67 94       	ror	r6
     9e2:	0a 94       	dec	r0
     9e4:	d2 f7       	brpl	.-12     	; 0x9da <_fpadd_parts+0x128>
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	a0 e0       	ldi	r26, 0x00	; 0
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	0a 2c       	mov	r0, r10
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <_fpadd_parts+0x148>
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	aa 1f       	adc	r26, r26
     9f8:	bb 1f       	adc	r27, r27
     9fa:	0a 94       	dec	r0
     9fc:	d2 f7       	brpl	.-12     	; 0x9f2 <_fpadd_parts+0x140>
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	a1 09       	sbc	r26, r1
     a02:	b1 09       	sbc	r27, r1
     a04:	82 23       	and	r24, r18
     a06:	93 23       	and	r25, r19
     a08:	a4 23       	and	r26, r20
     a0a:	b5 23       	and	r27, r21
     a0c:	21 e0       	ldi	r18, 0x01	; 1
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	19 f4       	brne	.+6      	; 0xa22 <_fpadd_parts+0x170>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	a9 01       	movw	r20, r18
     a22:	26 29       	or	r18, r6
     a24:	37 29       	or	r19, r7
     a26:	48 29       	or	r20, r8
     a28:	59 29       	or	r21, r9
     a2a:	0b c0       	rjmp	.+22     	; 0xa42 <_fpadd_parts+0x190>
     a2c:	6c 14       	cp	r6, r12
     a2e:	7d 04       	cpc	r7, r13
     a30:	24 f4       	brge	.+8      	; 0xa3a <_fpadd_parts+0x188>
     a32:	ee 24       	eor	r14, r14
     a34:	ff 24       	eor	r15, r15
     a36:	87 01       	movw	r16, r14
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <_fpadd_parts+0x190>
     a3a:	63 01       	movw	r12, r6
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	a9 01       	movw	r20, r18
     a42:	81 81       	ldd	r24, Z+1	; 0x01
     a44:	fb 01       	movw	r30, r22
     a46:	91 81       	ldd	r25, Z+1	; 0x01
     a48:	89 17       	cp	r24, r25
     a4a:	09 f4       	brne	.+2      	; 0xa4e <_fpadd_parts+0x19c>
     a4c:	45 c0       	rjmp	.+138    	; 0xad8 <_fpadd_parts+0x226>
     a4e:	88 23       	and	r24, r24
     a50:	49 f0       	breq	.+18     	; 0xa64 <_fpadd_parts+0x1b2>
     a52:	d8 01       	movw	r26, r16
     a54:	c7 01       	movw	r24, r14
     a56:	82 1b       	sub	r24, r18
     a58:	93 0b       	sbc	r25, r19
     a5a:	a4 0b       	sbc	r26, r20
     a5c:	b5 0b       	sbc	r27, r21
     a5e:	9c 01       	movw	r18, r24
     a60:	ad 01       	movw	r20, r26
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <_fpadd_parts+0x1ba>
     a64:	2e 19       	sub	r18, r14
     a66:	3f 09       	sbc	r19, r15
     a68:	40 0b       	sbc	r20, r16
     a6a:	51 0b       	sbc	r21, r17
     a6c:	57 fd       	sbrc	r21, 7
     a6e:	04 c0       	rjmp	.+8      	; 0xa78 <_fpadd_parts+0x1c6>
     a70:	19 82       	std	Y+1, r1	; 0x01
     a72:	db 82       	std	Y+3, r13	; 0x03
     a74:	ca 82       	std	Y+2, r12	; 0x02
     a76:	0b c0       	rjmp	.+22     	; 0xa8e <_fpadd_parts+0x1dc>
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	89 83       	std	Y+1, r24	; 0x01
     a7c:	db 82       	std	Y+3, r13	; 0x03
     a7e:	ca 82       	std	Y+2, r12	; 0x02
     a80:	50 95       	com	r21
     a82:	40 95       	com	r20
     a84:	30 95       	com	r19
     a86:	21 95       	neg	r18
     a88:	3f 4f       	sbci	r19, 0xFF	; 255
     a8a:	4f 4f       	sbci	r20, 0xFF	; 255
     a8c:	5f 4f       	sbci	r21, 0xFF	; 255
     a8e:	2c 83       	std	Y+4, r18	; 0x04
     a90:	3d 83       	std	Y+5, r19	; 0x05
     a92:	4e 83       	std	Y+6, r20	; 0x06
     a94:	5f 83       	std	Y+7, r21	; 0x07
     a96:	0d c0       	rjmp	.+26     	; 0xab2 <_fpadd_parts+0x200>
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	aa 1f       	adc	r26, r26
     a9e:	bb 1f       	adc	r27, r27
     aa0:	8c 83       	std	Y+4, r24	; 0x04
     aa2:	9d 83       	std	Y+5, r25	; 0x05
     aa4:	ae 83       	std	Y+6, r26	; 0x06
     aa6:	bf 83       	std	Y+7, r27	; 0x07
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	9b 81       	ldd	r25, Y+3	; 0x03
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	9b 83       	std	Y+3, r25	; 0x03
     ab0:	8a 83       	std	Y+2, r24	; 0x02
     ab2:	8c 81       	ldd	r24, Y+4	; 0x04
     ab4:	9d 81       	ldd	r25, Y+5	; 0x05
     ab6:	ae 81       	ldd	r26, Y+6	; 0x06
     ab8:	bf 81       	ldd	r27, Y+7	; 0x07
     aba:	9c 01       	movw	r18, r24
     abc:	ad 01       	movw	r20, r26
     abe:	21 50       	subi	r18, 0x01	; 1
     ac0:	30 40       	sbci	r19, 0x00	; 0
     ac2:	40 40       	sbci	r20, 0x00	; 0
     ac4:	50 40       	sbci	r21, 0x00	; 0
     ac6:	2f 3f       	cpi	r18, 0xFF	; 255
     ac8:	ef ef       	ldi	r30, 0xFF	; 255
     aca:	3e 07       	cpc	r19, r30
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	4e 07       	cpc	r20, r30
     ad0:	ef e3       	ldi	r30, 0x3F	; 63
     ad2:	5e 07       	cpc	r21, r30
     ad4:	08 f3       	brcs	.-62     	; 0xa98 <_fpadd_parts+0x1e6>
     ad6:	0b c0       	rjmp	.+22     	; 0xaee <_fpadd_parts+0x23c>
     ad8:	89 83       	std	Y+1, r24	; 0x01
     ada:	db 82       	std	Y+3, r13	; 0x03
     adc:	ca 82       	std	Y+2, r12	; 0x02
     ade:	2e 0d       	add	r18, r14
     ae0:	3f 1d       	adc	r19, r15
     ae2:	40 1f       	adc	r20, r16
     ae4:	51 1f       	adc	r21, r17
     ae6:	2c 83       	std	Y+4, r18	; 0x04
     ae8:	3d 83       	std	Y+5, r19	; 0x05
     aea:	4e 83       	std	Y+6, r20	; 0x06
     aec:	5f 83       	std	Y+7, r21	; 0x07
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	88 83       	st	Y, r24
     af2:	2c 81       	ldd	r18, Y+4	; 0x04
     af4:	3d 81       	ldd	r19, Y+5	; 0x05
     af6:	4e 81       	ldd	r20, Y+6	; 0x06
     af8:	5f 81       	ldd	r21, Y+7	; 0x07
     afa:	57 ff       	sbrs	r21, 7
     afc:	1d c0       	rjmp	.+58     	; 0xb38 <_fpadd_parts+0x286>
     afe:	da 01       	movw	r26, r20
     b00:	c9 01       	movw	r24, r18
     b02:	81 70       	andi	r24, 0x01	; 1
     b04:	90 70       	andi	r25, 0x00	; 0
     b06:	a0 70       	andi	r26, 0x00	; 0
     b08:	b0 70       	andi	r27, 0x00	; 0
     b0a:	56 95       	lsr	r21
     b0c:	47 95       	ror	r20
     b0e:	37 95       	ror	r19
     b10:	27 95       	ror	r18
     b12:	82 2b       	or	r24, r18
     b14:	93 2b       	or	r25, r19
     b16:	a4 2b       	or	r26, r20
     b18:	b5 2b       	or	r27, r21
     b1a:	8c 83       	std	Y+4, r24	; 0x04
     b1c:	9d 83       	std	Y+5, r25	; 0x05
     b1e:	ae 83       	std	Y+6, r26	; 0x06
     b20:	bf 83       	std	Y+7, r27	; 0x07
     b22:	8a 81       	ldd	r24, Y+2	; 0x02
     b24:	9b 81       	ldd	r25, Y+3	; 0x03
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	9b 83       	std	Y+3, r25	; 0x03
     b2a:	8a 83       	std	Y+2, r24	; 0x02
     b2c:	05 c0       	rjmp	.+10     	; 0xb38 <_fpadd_parts+0x286>
     b2e:	eb e7       	ldi	r30, 0x7B	; 123
     b30:	f1 e0       	ldi	r31, 0x01	; 1
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <_fpadd_parts+0x288>
     b34:	fb 01       	movw	r30, r22
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <_fpadd_parts+0x288>
     b38:	fe 01       	movw	r30, r28
     b3a:	cf 01       	movw	r24, r30
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	ee e0       	ldi	r30, 0x0E	; 14
     b42:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__epilogue_restores__+0x8>

00000b46 <__addsf3>:
     b46:	a0 e2       	ldi	r26, 0x20	; 32
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	e9 ea       	ldi	r30, 0xA9	; 169
     b4c:	f5 e0       	ldi	r31, 0x05	; 5
     b4e:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__prologue_saves__+0x18>
     b52:	69 83       	std	Y+1, r22	; 0x01
     b54:	7a 83       	std	Y+2, r23	; 0x02
     b56:	8b 83       	std	Y+3, r24	; 0x03
     b58:	9c 83       	std	Y+4, r25	; 0x04
     b5a:	2d 83       	std	Y+5, r18	; 0x05
     b5c:	3e 83       	std	Y+6, r19	; 0x06
     b5e:	4f 83       	std	Y+7, r20	; 0x07
     b60:	58 87       	std	Y+8, r21	; 0x08
     b62:	89 e0       	ldi	r24, 0x09	; 9
     b64:	e8 2e       	mov	r14, r24
     b66:	f1 2c       	mov	r15, r1
     b68:	ec 0e       	add	r14, r28
     b6a:	fd 1e       	adc	r15, r29
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	b7 01       	movw	r22, r14
     b72:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     b76:	8e 01       	movw	r16, r28
     b78:	0f 5e       	subi	r16, 0xEF	; 239
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	ce 01       	movw	r24, r28
     b7e:	05 96       	adiw	r24, 0x05	; 5
     b80:	b8 01       	movw	r22, r16
     b82:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     b86:	c7 01       	movw	r24, r14
     b88:	b8 01       	movw	r22, r16
     b8a:	ae 01       	movw	r20, r28
     b8c:	47 5e       	subi	r20, 0xE7	; 231
     b8e:	5f 4f       	sbci	r21, 0xFF	; 255
     b90:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_fpadd_parts>
     b94:	0e 94 dd 07 	call	0xfba	; 0xfba <__pack_f>
     b98:	a0 96       	adiw	r28, 0x20	; 32
     b9a:	e6 e0       	ldi	r30, 0x06	; 6
     b9c:	0c 94 95 09 	jmp	0x132a	; 0x132a <__epilogue_restores__+0x18>

00000ba0 <__subsf3>:
     ba0:	a0 e2       	ldi	r26, 0x20	; 32
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e6 ed       	ldi	r30, 0xD6	; 214
     ba6:	f5 e0       	ldi	r31, 0x05	; 5
     ba8:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__prologue_saves__+0x18>
     bac:	69 83       	std	Y+1, r22	; 0x01
     bae:	7a 83       	std	Y+2, r23	; 0x02
     bb0:	8b 83       	std	Y+3, r24	; 0x03
     bb2:	9c 83       	std	Y+4, r25	; 0x04
     bb4:	2d 83       	std	Y+5, r18	; 0x05
     bb6:	3e 83       	std	Y+6, r19	; 0x06
     bb8:	4f 83       	std	Y+7, r20	; 0x07
     bba:	58 87       	std	Y+8, r21	; 0x08
     bbc:	8e 01       	movw	r16, r28
     bbe:	07 5f       	subi	r16, 0xF7	; 247
     bc0:	1f 4f       	sbci	r17, 0xFF	; 255
     bc2:	ce 01       	movw	r24, r28
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	b8 01       	movw	r22, r16
     bc8:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     bcc:	91 e1       	ldi	r25, 0x11	; 17
     bce:	e9 2e       	mov	r14, r25
     bd0:	f1 2c       	mov	r15, r1
     bd2:	ec 0e       	add	r14, r28
     bd4:	fd 1e       	adc	r15, r29
     bd6:	ce 01       	movw	r24, r28
     bd8:	05 96       	adiw	r24, 0x05	; 5
     bda:	b7 01       	movw	r22, r14
     bdc:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     be0:	8a 89       	ldd	r24, Y+18	; 0x12
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	89 27       	eor	r24, r25
     be6:	8a 8b       	std	Y+18, r24	; 0x12
     be8:	c8 01       	movw	r24, r16
     bea:	b7 01       	movw	r22, r14
     bec:	ae 01       	movw	r20, r28
     bee:	47 5e       	subi	r20, 0xE7	; 231
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_fpadd_parts>
     bf6:	0e 94 dd 07 	call	0xfba	; 0xfba <__pack_f>
     bfa:	a0 96       	adiw	r28, 0x20	; 32
     bfc:	e6 e0       	ldi	r30, 0x06	; 6
     bfe:	0c 94 95 09 	jmp	0x132a	; 0x132a <__epilogue_restores__+0x18>

00000c02 <__mulsf3>:
     c02:	a0 e2       	ldi	r26, 0x20	; 32
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e7 e0       	ldi	r30, 0x07	; 7
     c08:	f6 e0       	ldi	r31, 0x06	; 6
     c0a:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__prologue_saves__>
     c0e:	69 83       	std	Y+1, r22	; 0x01
     c10:	7a 83       	std	Y+2, r23	; 0x02
     c12:	8b 83       	std	Y+3, r24	; 0x03
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	2d 83       	std	Y+5, r18	; 0x05
     c18:	3e 83       	std	Y+6, r19	; 0x06
     c1a:	4f 83       	std	Y+7, r20	; 0x07
     c1c:	58 87       	std	Y+8, r21	; 0x08
     c1e:	ce 01       	movw	r24, r28
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	be 01       	movw	r22, r28
     c24:	67 5f       	subi	r22, 0xF7	; 247
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     c2c:	ce 01       	movw	r24, r28
     c2e:	05 96       	adiw	r24, 0x05	; 5
     c30:	be 01       	movw	r22, r28
     c32:	6f 5e       	subi	r22, 0xEF	; 239
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     c3a:	99 85       	ldd	r25, Y+9	; 0x09
     c3c:	92 30       	cpi	r25, 0x02	; 2
     c3e:	78 f0       	brcs	.+30     	; 0xc5e <__mulsf3+0x5c>
     c40:	89 89       	ldd	r24, Y+17	; 0x11
     c42:	82 30       	cpi	r24, 0x02	; 2
     c44:	c0 f0       	brcs	.+48     	; 0xc76 <__mulsf3+0x74>
     c46:	94 30       	cpi	r25, 0x04	; 4
     c48:	19 f4       	brne	.+6      	; 0xc50 <__mulsf3+0x4e>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	41 f4       	brne	.+16     	; 0xc5e <__mulsf3+0x5c>
     c4e:	cb c0       	rjmp	.+406    	; 0xde6 <__mulsf3+0x1e4>
     c50:	84 30       	cpi	r24, 0x04	; 4
     c52:	19 f4       	brne	.+6      	; 0xc5a <__mulsf3+0x58>
     c54:	92 30       	cpi	r25, 0x02	; 2
     c56:	79 f4       	brne	.+30     	; 0xc76 <__mulsf3+0x74>
     c58:	c6 c0       	rjmp	.+396    	; 0xde6 <__mulsf3+0x1e4>
     c5a:	92 30       	cpi	r25, 0x02	; 2
     c5c:	51 f4       	brne	.+20     	; 0xc72 <__mulsf3+0x70>
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	2a 85       	ldd	r18, Y+10	; 0x0a
     c62:	9a 89       	ldd	r25, Y+18	; 0x12
     c64:	29 17       	cp	r18, r25
     c66:	09 f4       	brne	.+2      	; 0xc6a <__mulsf3+0x68>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	8a 87       	std	Y+10, r24	; 0x0a
     c6c:	ce 01       	movw	r24, r28
     c6e:	09 96       	adiw	r24, 0x09	; 9
     c70:	bc c0       	rjmp	.+376    	; 0xdea <__mulsf3+0x1e8>
     c72:	82 30       	cpi	r24, 0x02	; 2
     c74:	51 f4       	brne	.+20     	; 0xc8a <__mulsf3+0x88>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	2a 85       	ldd	r18, Y+10	; 0x0a
     c7a:	9a 89       	ldd	r25, Y+18	; 0x12
     c7c:	29 17       	cp	r18, r25
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__mulsf3+0x80>
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	8a 8b       	std	Y+18, r24	; 0x12
     c84:	ce 01       	movw	r24, r28
     c86:	41 96       	adiw	r24, 0x11	; 17
     c88:	b0 c0       	rjmp	.+352    	; 0xdea <__mulsf3+0x1e8>
     c8a:	6d 84       	ldd	r6, Y+13	; 0x0d
     c8c:	7e 84       	ldd	r7, Y+14	; 0x0e
     c8e:	8f 84       	ldd	r8, Y+15	; 0x0f
     c90:	98 88       	ldd	r9, Y+16	; 0x10
     c92:	ed 88       	ldd	r14, Y+21	; 0x15
     c94:	fe 88       	ldd	r15, Y+22	; 0x16
     c96:	0f 89       	ldd	r16, Y+23	; 0x17
     c98:	18 8d       	ldd	r17, Y+24	; 0x18
     c9a:	e0 e2       	ldi	r30, 0x20	; 32
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	dc 01       	movw	r26, r24
     ca4:	aa 24       	eor	r10, r10
     ca6:	bb 24       	eor	r11, r11
     ca8:	65 01       	movw	r12, r10
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	a9 01       	movw	r20, r18
     cb0:	b3 01       	movw	r22, r6
     cb2:	61 70       	andi	r22, 0x01	; 1
     cb4:	70 70       	andi	r23, 0x00	; 0
     cb6:	61 15       	cp	r22, r1
     cb8:	71 05       	cpc	r23, r1
     cba:	d1 f0       	breq	.+52     	; 0xcf0 <__mulsf3+0xee>
     cbc:	2e 0d       	add	r18, r14
     cbe:	3f 1d       	adc	r19, r15
     cc0:	40 1f       	adc	r20, r16
     cc2:	51 1f       	adc	r21, r17
     cc4:	15 01       	movw	r2, r10
     cc6:	26 01       	movw	r4, r12
     cc8:	28 0e       	add	r2, r24
     cca:	39 1e       	adc	r3, r25
     ccc:	4a 1e       	adc	r4, r26
     cce:	5b 1e       	adc	r5, r27
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	2e 15       	cp	r18, r14
     cda:	3f 05       	cpc	r19, r15
     cdc:	40 07       	cpc	r20, r16
     cde:	51 07       	cpc	r21, r17
     ce0:	18 f0       	brcs	.+6      	; 0xce8 <__mulsf3+0xe6>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	dc 01       	movw	r26, r24
     ce8:	82 0d       	add	r24, r2
     cea:	93 1d       	adc	r25, r3
     cec:	a4 1d       	adc	r26, r4
     cee:	b5 1d       	adc	r27, r5
     cf0:	aa 0c       	add	r10, r10
     cf2:	bb 1c       	adc	r11, r11
     cf4:	cc 1c       	adc	r12, r12
     cf6:	dd 1c       	adc	r13, r13
     cf8:	17 ff       	sbrs	r17, 7
     cfa:	09 c0       	rjmp	.+18     	; 0xd0e <__mulsf3+0x10c>
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	26 2e       	mov	r2, r22
     d00:	31 2c       	mov	r3, r1
     d02:	41 2c       	mov	r4, r1
     d04:	51 2c       	mov	r5, r1
     d06:	a2 28       	or	r10, r2
     d08:	b3 28       	or	r11, r3
     d0a:	c4 28       	or	r12, r4
     d0c:	d5 28       	or	r13, r5
     d0e:	31 97       	sbiw	r30, 0x01	; 1
     d10:	49 f0       	breq	.+18     	; 0xd24 <__mulsf3+0x122>
     d12:	ee 0c       	add	r14, r14
     d14:	ff 1c       	adc	r15, r15
     d16:	00 1f       	adc	r16, r16
     d18:	11 1f       	adc	r17, r17
     d1a:	96 94       	lsr	r9
     d1c:	87 94       	ror	r8
     d1e:	77 94       	ror	r7
     d20:	67 94       	ror	r6
     d22:	c6 cf       	rjmp	.-116    	; 0xcb0 <__mulsf3+0xae>
     d24:	6b 89       	ldd	r22, Y+19	; 0x13
     d26:	7c 89       	ldd	r23, Y+20	; 0x14
     d28:	eb 85       	ldd	r30, Y+11	; 0x0b
     d2a:	fc 85       	ldd	r31, Y+12	; 0x0c
     d2c:	6e 0f       	add	r22, r30
     d2e:	7f 1f       	adc	r23, r31
     d30:	6e 5f       	subi	r22, 0xFE	; 254
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	7c 8f       	std	Y+28, r23	; 0x1c
     d36:	6b 8f       	std	Y+27, r22	; 0x1b
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	ea 85       	ldd	r30, Y+10	; 0x0a
     d3c:	7a 89       	ldd	r23, Y+18	; 0x12
     d3e:	e7 17       	cp	r30, r23
     d40:	09 f4       	brne	.+2      	; 0xd44 <__mulsf3+0x142>
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	6a 8f       	std	Y+26, r22	; 0x1a
     d46:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d48:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d4a:	10 c0       	rjmp	.+32     	; 0xd6c <__mulsf3+0x16a>
     d4c:	fc 01       	movw	r30, r24
     d4e:	e1 70       	andi	r30, 0x01	; 1
     d50:	f0 70       	andi	r31, 0x00	; 0
     d52:	30 97       	sbiw	r30, 0x00	; 0
     d54:	29 f0       	breq	.+10     	; 0xd60 <__mulsf3+0x15e>
     d56:	56 95       	lsr	r21
     d58:	47 95       	ror	r20
     d5a:	37 95       	ror	r19
     d5c:	27 95       	ror	r18
     d5e:	50 68       	ori	r21, 0x80	; 128
     d60:	b6 95       	lsr	r27
     d62:	a7 95       	ror	r26
     d64:	97 95       	ror	r25
     d66:	87 95       	ror	r24
     d68:	6f 5f       	subi	r22, 0xFF	; 255
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	b7 fd       	sbrc	r27, 7
     d6e:	ee cf       	rjmp	.-36     	; 0xd4c <__mulsf3+0x14a>
     d70:	0c c0       	rjmp	.+24     	; 0xd8a <__mulsf3+0x188>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	aa 1f       	adc	r26, r26
     d78:	bb 1f       	adc	r27, r27
     d7a:	57 fd       	sbrc	r21, 7
     d7c:	81 60       	ori	r24, 0x01	; 1
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	44 1f       	adc	r20, r20
     d84:	55 1f       	adc	r21, r21
     d86:	61 50       	subi	r22, 0x01	; 1
     d88:	70 40       	sbci	r23, 0x00	; 0
     d8a:	80 30       	cpi	r24, 0x00	; 0
     d8c:	e0 e0       	ldi	r30, 0x00	; 0
     d8e:	9e 07       	cpc	r25, r30
     d90:	e0 e0       	ldi	r30, 0x00	; 0
     d92:	ae 07       	cpc	r26, r30
     d94:	e0 e4       	ldi	r30, 0x40	; 64
     d96:	be 07       	cpc	r27, r30
     d98:	60 f3       	brcs	.-40     	; 0xd72 <__mulsf3+0x170>
     d9a:	6b 8f       	std	Y+27, r22	; 0x1b
     d9c:	7c 8f       	std	Y+28, r23	; 0x1c
     d9e:	6f e7       	ldi	r22, 0x7F	; 127
     da0:	e6 2e       	mov	r14, r22
     da2:	f1 2c       	mov	r15, r1
     da4:	01 2d       	mov	r16, r1
     da6:	11 2d       	mov	r17, r1
     da8:	e8 22       	and	r14, r24
     daa:	f9 22       	and	r15, r25
     dac:	0a 23       	and	r16, r26
     dae:	1b 23       	and	r17, r27
     db0:	60 e4       	ldi	r22, 0x40	; 64
     db2:	e6 16       	cp	r14, r22
     db4:	f1 04       	cpc	r15, r1
     db6:	01 05       	cpc	r16, r1
     db8:	11 05       	cpc	r17, r1
     dba:	61 f4       	brne	.+24     	; 0xdd4 <__mulsf3+0x1d2>
     dbc:	87 fd       	sbrc	r24, 7
     dbe:	0a c0       	rjmp	.+20     	; 0xdd4 <__mulsf3+0x1d2>
     dc0:	21 15       	cp	r18, r1
     dc2:	31 05       	cpc	r19, r1
     dc4:	41 05       	cpc	r20, r1
     dc6:	51 05       	cpc	r21, r1
     dc8:	29 f0       	breq	.+10     	; 0xdd4 <__mulsf3+0x1d2>
     dca:	80 5c       	subi	r24, 0xC0	; 192
     dcc:	9f 4f       	sbci	r25, 0xFF	; 255
     dce:	af 4f       	sbci	r26, 0xFF	; 255
     dd0:	bf 4f       	sbci	r27, 0xFF	; 255
     dd2:	80 78       	andi	r24, 0x80	; 128
     dd4:	8d 8f       	std	Y+29, r24	; 0x1d
     dd6:	9e 8f       	std	Y+30, r25	; 0x1e
     dd8:	af 8f       	std	Y+31, r26	; 0x1f
     dda:	b8 a3       	std	Y+32, r27	; 0x20
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	89 8f       	std	Y+25, r24	; 0x19
     de0:	ce 01       	movw	r24, r28
     de2:	49 96       	adiw	r24, 0x19	; 25
     de4:	02 c0       	rjmp	.+4      	; 0xdea <__mulsf3+0x1e8>
     de6:	8b e7       	ldi	r24, 0x7B	; 123
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 dd 07 	call	0xfba	; 0xfba <__pack_f>
     dee:	a0 96       	adiw	r28, 0x20	; 32
     df0:	e2 e1       	ldi	r30, 0x12	; 18
     df2:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__epilogue_restores__>

00000df6 <__gtsf2>:
     df6:	a8 e1       	ldi	r26, 0x18	; 24
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e1 e0       	ldi	r30, 0x01	; 1
     dfc:	f7 e0       	ldi	r31, 0x07	; 7
     dfe:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__prologue_saves__+0x18>
     e02:	69 83       	std	Y+1, r22	; 0x01
     e04:	7a 83       	std	Y+2, r23	; 0x02
     e06:	8b 83       	std	Y+3, r24	; 0x03
     e08:	9c 83       	std	Y+4, r25	; 0x04
     e0a:	2d 83       	std	Y+5, r18	; 0x05
     e0c:	3e 83       	std	Y+6, r19	; 0x06
     e0e:	4f 83       	std	Y+7, r20	; 0x07
     e10:	58 87       	std	Y+8, r21	; 0x08
     e12:	8e 01       	movw	r16, r28
     e14:	07 5f       	subi	r16, 0xF7	; 247
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	ce 01       	movw	r24, r28
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	b8 01       	movw	r22, r16
     e1e:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     e22:	81 e1       	ldi	r24, 0x11	; 17
     e24:	e8 2e       	mov	r14, r24
     e26:	f1 2c       	mov	r15, r1
     e28:	ec 0e       	add	r14, r28
     e2a:	fd 1e       	adc	r15, r29
     e2c:	ce 01       	movw	r24, r28
     e2e:	05 96       	adiw	r24, 0x05	; 5
     e30:	b7 01       	movw	r22, r14
     e32:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     e36:	89 85       	ldd	r24, Y+9	; 0x09
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	40 f0       	brcs	.+16     	; 0xe4c <__gtsf2+0x56>
     e3c:	89 89       	ldd	r24, Y+17	; 0x11
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	28 f0       	brcs	.+10     	; 0xe4c <__gtsf2+0x56>
     e42:	c8 01       	movw	r24, r16
     e44:	b7 01       	movw	r22, r14
     e46:	0e 94 14 09 	call	0x1228	; 0x1228 <__fpcmp_parts_f>
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <__gtsf2+0x58>
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	68 96       	adiw	r28, 0x18	; 24
     e50:	e6 e0       	ldi	r30, 0x06	; 6
     e52:	0c 94 95 09 	jmp	0x132a	; 0x132a <__epilogue_restores__+0x18>

00000e56 <__gesf2>:
     e56:	a8 e1       	ldi	r26, 0x18	; 24
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e1 e3       	ldi	r30, 0x31	; 49
     e5c:	f7 e0       	ldi	r31, 0x07	; 7
     e5e:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__prologue_saves__+0x18>
     e62:	69 83       	std	Y+1, r22	; 0x01
     e64:	7a 83       	std	Y+2, r23	; 0x02
     e66:	8b 83       	std	Y+3, r24	; 0x03
     e68:	9c 83       	std	Y+4, r25	; 0x04
     e6a:	2d 83       	std	Y+5, r18	; 0x05
     e6c:	3e 83       	std	Y+6, r19	; 0x06
     e6e:	4f 83       	std	Y+7, r20	; 0x07
     e70:	58 87       	std	Y+8, r21	; 0x08
     e72:	8e 01       	movw	r16, r28
     e74:	07 5f       	subi	r16, 0xF7	; 247
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	b8 01       	movw	r22, r16
     e7e:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     e82:	81 e1       	ldi	r24, 0x11	; 17
     e84:	e8 2e       	mov	r14, r24
     e86:	f1 2c       	mov	r15, r1
     e88:	ec 0e       	add	r14, r28
     e8a:	fd 1e       	adc	r15, r29
     e8c:	ce 01       	movw	r24, r28
     e8e:	05 96       	adiw	r24, 0x05	; 5
     e90:	b7 01       	movw	r22, r14
     e92:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     e96:	89 85       	ldd	r24, Y+9	; 0x09
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	40 f0       	brcs	.+16     	; 0xeac <__gesf2+0x56>
     e9c:	89 89       	ldd	r24, Y+17	; 0x11
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	28 f0       	brcs	.+10     	; 0xeac <__gesf2+0x56>
     ea2:	c8 01       	movw	r24, r16
     ea4:	b7 01       	movw	r22, r14
     ea6:	0e 94 14 09 	call	0x1228	; 0x1228 <__fpcmp_parts_f>
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <__gesf2+0x58>
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	68 96       	adiw	r28, 0x18	; 24
     eb0:	e6 e0       	ldi	r30, 0x06	; 6
     eb2:	0c 94 95 09 	jmp	0x132a	; 0x132a <__epilogue_restores__+0x18>

00000eb6 <__ltsf2>:
     eb6:	a8 e1       	ldi	r26, 0x18	; 24
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e1 e6       	ldi	r30, 0x61	; 97
     ebc:	f7 e0       	ldi	r31, 0x07	; 7
     ebe:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__prologue_saves__+0x18>
     ec2:	69 83       	std	Y+1, r22	; 0x01
     ec4:	7a 83       	std	Y+2, r23	; 0x02
     ec6:	8b 83       	std	Y+3, r24	; 0x03
     ec8:	9c 83       	std	Y+4, r25	; 0x04
     eca:	2d 83       	std	Y+5, r18	; 0x05
     ecc:	3e 83       	std	Y+6, r19	; 0x06
     ece:	4f 83       	std	Y+7, r20	; 0x07
     ed0:	58 87       	std	Y+8, r21	; 0x08
     ed2:	8e 01       	movw	r16, r28
     ed4:	07 5f       	subi	r16, 0xF7	; 247
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	b8 01       	movw	r22, r16
     ede:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     ee2:	81 e1       	ldi	r24, 0x11	; 17
     ee4:	e8 2e       	mov	r14, r24
     ee6:	f1 2c       	mov	r15, r1
     ee8:	ec 0e       	add	r14, r28
     eea:	fd 1e       	adc	r15, r29
     eec:	ce 01       	movw	r24, r28
     eee:	05 96       	adiw	r24, 0x05	; 5
     ef0:	b7 01       	movw	r22, r14
     ef2:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     ef6:	89 85       	ldd	r24, Y+9	; 0x09
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	40 f0       	brcs	.+16     	; 0xf0c <__ltsf2+0x56>
     efc:	89 89       	ldd	r24, Y+17	; 0x11
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	28 f0       	brcs	.+10     	; 0xf0c <__ltsf2+0x56>
     f02:	c8 01       	movw	r24, r16
     f04:	b7 01       	movw	r22, r14
     f06:	0e 94 14 09 	call	0x1228	; 0x1228 <__fpcmp_parts_f>
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <__ltsf2+0x58>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	68 96       	adiw	r28, 0x18	; 24
     f10:	e6 e0       	ldi	r30, 0x06	; 6
     f12:	0c 94 95 09 	jmp	0x132a	; 0x132a <__epilogue_restores__+0x18>

00000f16 <__fixsfsi>:
     f16:	ac e0       	ldi	r26, 0x0C	; 12
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e1 e9       	ldi	r30, 0x91	; 145
     f1c:	f7 e0       	ldi	r31, 0x07	; 7
     f1e:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__prologue_saves__+0x20>
     f22:	69 83       	std	Y+1, r22	; 0x01
     f24:	7a 83       	std	Y+2, r23	; 0x02
     f26:	8b 83       	std	Y+3, r24	; 0x03
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	be 01       	movw	r22, r28
     f30:	6b 5f       	subi	r22, 0xFB	; 251
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	0e 94 ab 08 	call	0x1156	; 0x1156 <__unpack_f>
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	81 f1       	breq	.+96     	; 0xf9e <__fixsfsi+0x88>
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	70 f1       	brcs	.+92     	; 0xf9e <__fixsfsi+0x88>
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	21 f4       	brne	.+8      	; 0xf4e <__fixsfsi+0x38>
     f46:	8e 81       	ldd	r24, Y+6	; 0x06
     f48:	88 23       	and	r24, r24
     f4a:	69 f1       	breq	.+90     	; 0xfa6 <__fixsfsi+0x90>
     f4c:	0a c0       	rjmp	.+20     	; 0xf62 <__fixsfsi+0x4c>
     f4e:	2f 81       	ldd	r18, Y+7	; 0x07
     f50:	38 85       	ldd	r19, Y+8	; 0x08
     f52:	37 fd       	sbrc	r19, 7
     f54:	24 c0       	rjmp	.+72     	; 0xf9e <__fixsfsi+0x88>
     f56:	6e 81       	ldd	r22, Y+6	; 0x06
     f58:	2f 31       	cpi	r18, 0x1F	; 31
     f5a:	31 05       	cpc	r19, r1
     f5c:	3c f0       	brlt	.+14     	; 0xf6c <__fixsfsi+0x56>
     f5e:	66 23       	and	r22, r22
     f60:	11 f1       	breq	.+68     	; 0xfa6 <__fixsfsi+0x90>
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e8       	ldi	r21, 0x80	; 128
     f6a:	21 c0       	rjmp	.+66     	; 0xfae <__fixsfsi+0x98>
     f6c:	8e e1       	ldi	r24, 0x1E	; 30
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	82 1b       	sub	r24, r18
     f72:	93 0b       	sbc	r25, r19
     f74:	29 85       	ldd	r18, Y+9	; 0x09
     f76:	3a 85       	ldd	r19, Y+10	; 0x0a
     f78:	4b 85       	ldd	r20, Y+11	; 0x0b
     f7a:	5c 85       	ldd	r21, Y+12	; 0x0c
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <__fixsfsi+0x70>
     f7e:	56 95       	lsr	r21
     f80:	47 95       	ror	r20
     f82:	37 95       	ror	r19
     f84:	27 95       	ror	r18
     f86:	8a 95       	dec	r24
     f88:	d2 f7       	brpl	.-12     	; 0xf7e <__fixsfsi+0x68>
     f8a:	66 23       	and	r22, r22
     f8c:	81 f0       	breq	.+32     	; 0xfae <__fixsfsi+0x98>
     f8e:	50 95       	com	r21
     f90:	40 95       	com	r20
     f92:	30 95       	com	r19
     f94:	21 95       	neg	r18
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	4f 4f       	sbci	r20, 0xFF	; 255
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	08 c0       	rjmp	.+16     	; 0xfae <__fixsfsi+0x98>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	a9 01       	movw	r20, r18
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <__fixsfsi+0x98>
     fa6:	2f ef       	ldi	r18, 0xFF	; 255
     fa8:	3f ef       	ldi	r19, 0xFF	; 255
     faa:	4f ef       	ldi	r20, 0xFF	; 255
     fac:	5f e7       	ldi	r21, 0x7F	; 127
     fae:	b9 01       	movw	r22, r18
     fb0:	ca 01       	movw	r24, r20
     fb2:	2c 96       	adiw	r28, 0x0c	; 12
     fb4:	e2 e0       	ldi	r30, 0x02	; 2
     fb6:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__epilogue_restores__+0x20>

00000fba <__pack_f>:
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	fc 01       	movw	r30, r24
     fc8:	24 81       	ldd	r18, Z+4	; 0x04
     fca:	35 81       	ldd	r19, Z+5	; 0x05
     fcc:	46 81       	ldd	r20, Z+6	; 0x06
     fce:	57 81       	ldd	r21, Z+7	; 0x07
     fd0:	61 81       	ldd	r22, Z+1	; 0x01
     fd2:	80 81       	ld	r24, Z
     fd4:	82 30       	cpi	r24, 0x02	; 2
     fd6:	20 f4       	brcc	.+8      	; 0xfe0 <__pack_f+0x26>
     fd8:	40 61       	ori	r20, 0x10	; 16
     fda:	ef ef       	ldi	r30, 0xFF	; 255
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	a3 c0       	rjmp	.+326    	; 0x1126 <__pack_f+0x16c>
     fe0:	84 30       	cpi	r24, 0x04	; 4
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <__pack_f+0x2c>
     fe4:	9b c0       	rjmp	.+310    	; 0x111c <__pack_f+0x162>
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	09 f4       	brne	.+2      	; 0xfec <__pack_f+0x32>
     fea:	92 c0       	rjmp	.+292    	; 0x1110 <__pack_f+0x156>
     fec:	21 15       	cp	r18, r1
     fee:	31 05       	cpc	r19, r1
     ff0:	41 05       	cpc	r20, r1
     ff2:	51 05       	cpc	r21, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <__pack_f+0x3e>
     ff6:	8f c0       	rjmp	.+286    	; 0x1116 <__pack_f+0x15c>
     ff8:	02 80       	ldd	r0, Z+2	; 0x02
     ffa:	f3 81       	ldd	r31, Z+3	; 0x03
     ffc:	e0 2d       	mov	r30, r0
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	e2 38       	cpi	r30, 0x82	; 130
    1002:	f8 07       	cpc	r31, r24
    1004:	0c f0       	brlt	.+2      	; 0x1008 <__pack_f+0x4e>
    1006:	5a c0       	rjmp	.+180    	; 0x10bc <__pack_f+0x102>
    1008:	c2 e8       	ldi	r28, 0x82	; 130
    100a:	df ef       	ldi	r29, 0xFF	; 255
    100c:	ce 1b       	sub	r28, r30
    100e:	df 0b       	sbc	r29, r31
    1010:	ca 31       	cpi	r28, 0x1A	; 26
    1012:	d1 05       	cpc	r29, r1
    1014:	6c f5       	brge	.+90     	; 0x1070 <__pack_f+0xb6>
    1016:	79 01       	movw	r14, r18
    1018:	8a 01       	movw	r16, r20
    101a:	0c 2e       	mov	r0, r28
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <__pack_f+0x6c>
    101e:	16 95       	lsr	r17
    1020:	07 95       	ror	r16
    1022:	f7 94       	ror	r15
    1024:	e7 94       	ror	r14
    1026:	0a 94       	dec	r0
    1028:	d2 f7       	brpl	.-12     	; 0x101e <__pack_f+0x64>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a0 e0       	ldi	r26, 0x00	; 0
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	0c 2e       	mov	r0, r28
    1034:	04 c0       	rjmp	.+8      	; 0x103e <__pack_f+0x84>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	aa 1f       	adc	r26, r26
    103c:	bb 1f       	adc	r27, r27
    103e:	0a 94       	dec	r0
    1040:	d2 f7       	brpl	.-12     	; 0x1036 <__pack_f+0x7c>
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	a1 09       	sbc	r26, r1
    1046:	b1 09       	sbc	r27, r1
    1048:	82 23       	and	r24, r18
    104a:	93 23       	and	r25, r19
    104c:	a4 23       	and	r26, r20
    104e:	b5 23       	and	r27, r21
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	a1 05       	cpc	r26, r1
    105c:	b1 05       	cpc	r27, r1
    105e:	19 f4       	brne	.+6      	; 0x1066 <__pack_f+0xac>
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	a9 01       	movw	r20, r18
    1066:	2e 29       	or	r18, r14
    1068:	3f 29       	or	r19, r15
    106a:	40 2b       	or	r20, r16
    106c:	51 2b       	or	r21, r17
    106e:	03 c0       	rjmp	.+6      	; 0x1076 <__pack_f+0xbc>
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	a9 01       	movw	r20, r18
    1076:	da 01       	movw	r26, r20
    1078:	c9 01       	movw	r24, r18
    107a:	8f 77       	andi	r24, 0x7F	; 127
    107c:	90 70       	andi	r25, 0x00	; 0
    107e:	a0 70       	andi	r26, 0x00	; 0
    1080:	b0 70       	andi	r27, 0x00	; 0
    1082:	80 34       	cpi	r24, 0x40	; 64
    1084:	91 05       	cpc	r25, r1
    1086:	a1 05       	cpc	r26, r1
    1088:	b1 05       	cpc	r27, r1
    108a:	39 f4       	brne	.+14     	; 0x109a <__pack_f+0xe0>
    108c:	27 ff       	sbrs	r18, 7
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <__pack_f+0xe8>
    1090:	20 5c       	subi	r18, 0xC0	; 192
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	4f 4f       	sbci	r20, 0xFF	; 255
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <__pack_f+0xe8>
    109a:	21 5c       	subi	r18, 0xC1	; 193
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	4f 4f       	sbci	r20, 0xFF	; 255
    10a0:	5f 4f       	sbci	r21, 0xFF	; 255
    10a2:	e1 e0       	ldi	r30, 0x01	; 1
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	20 30       	cpi	r18, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	38 07       	cpc	r19, r24
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	48 07       	cpc	r20, r24
    10b0:	80 e4       	ldi	r24, 0x40	; 64
    10b2:	58 07       	cpc	r21, r24
    10b4:	28 f5       	brcc	.+74     	; 0x1100 <__pack_f+0x146>
    10b6:	e0 e0       	ldi	r30, 0x00	; 0
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	22 c0       	rjmp	.+68     	; 0x1100 <__pack_f+0x146>
    10bc:	e0 38       	cpi	r30, 0x80	; 128
    10be:	f1 05       	cpc	r31, r1
    10c0:	6c f5       	brge	.+90     	; 0x111c <__pack_f+0x162>
    10c2:	e1 58       	subi	r30, 0x81	; 129
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	da 01       	movw	r26, r20
    10c8:	c9 01       	movw	r24, r18
    10ca:	8f 77       	andi	r24, 0x7F	; 127
    10cc:	90 70       	andi	r25, 0x00	; 0
    10ce:	a0 70       	andi	r26, 0x00	; 0
    10d0:	b0 70       	andi	r27, 0x00	; 0
    10d2:	80 34       	cpi	r24, 0x40	; 64
    10d4:	91 05       	cpc	r25, r1
    10d6:	a1 05       	cpc	r26, r1
    10d8:	b1 05       	cpc	r27, r1
    10da:	39 f4       	brne	.+14     	; 0x10ea <__pack_f+0x130>
    10dc:	27 ff       	sbrs	r18, 7
    10de:	09 c0       	rjmp	.+18     	; 0x10f2 <__pack_f+0x138>
    10e0:	20 5c       	subi	r18, 0xC0	; 192
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	4f 4f       	sbci	r20, 0xFF	; 255
    10e6:	5f 4f       	sbci	r21, 0xFF	; 255
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <__pack_f+0x138>
    10ea:	21 5c       	subi	r18, 0xC1	; 193
    10ec:	3f 4f       	sbci	r19, 0xFF	; 255
    10ee:	4f 4f       	sbci	r20, 0xFF	; 255
    10f0:	5f 4f       	sbci	r21, 0xFF	; 255
    10f2:	57 ff       	sbrs	r21, 7
    10f4:	05 c0       	rjmp	.+10     	; 0x1100 <__pack_f+0x146>
    10f6:	56 95       	lsr	r21
    10f8:	47 95       	ror	r20
    10fa:	37 95       	ror	r19
    10fc:	27 95       	ror	r18
    10fe:	31 96       	adiw	r30, 0x01	; 1
    1100:	87 e0       	ldi	r24, 0x07	; 7
    1102:	56 95       	lsr	r21
    1104:	47 95       	ror	r20
    1106:	37 95       	ror	r19
    1108:	27 95       	ror	r18
    110a:	8a 95       	dec	r24
    110c:	d1 f7       	brne	.-12     	; 0x1102 <__pack_f+0x148>
    110e:	0b c0       	rjmp	.+22     	; 0x1126 <__pack_f+0x16c>
    1110:	e0 e0       	ldi	r30, 0x00	; 0
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	05 c0       	rjmp	.+10     	; 0x1120 <__pack_f+0x166>
    1116:	e0 e0       	ldi	r30, 0x00	; 0
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <__pack_f+0x16c>
    111c:	ef ef       	ldi	r30, 0xFF	; 255
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	a9 01       	movw	r20, r18
    1126:	8e 2f       	mov	r24, r30
    1128:	87 95       	ror	r24
    112a:	88 27       	eor	r24, r24
    112c:	87 95       	ror	r24
    112e:	94 2f       	mov	r25, r20
    1130:	9f 77       	andi	r25, 0x7F	; 127
    1132:	67 95       	ror	r22
    1134:	66 27       	eor	r22, r22
    1136:	67 95       	ror	r22
    1138:	e6 95       	lsr	r30
    113a:	e2 2e       	mov	r14, r18
    113c:	a9 2f       	mov	r26, r25
    113e:	a8 2b       	or	r26, r24
    1140:	fe 2f       	mov	r31, r30
    1142:	f6 2b       	or	r31, r22
    1144:	62 2f       	mov	r22, r18
    1146:	73 2f       	mov	r23, r19
    1148:	8a 2f       	mov	r24, r26
    114a:	9f 2f       	mov	r25, r31
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	e6 e0       	ldi	r30, 0x06	; 6
    1152:	0c 94 95 09 	jmp	0x132a	; 0x132a <__epilogue_restores__+0x18>

00001156 <__unpack_f>:
    1156:	dc 01       	movw	r26, r24
    1158:	fb 01       	movw	r30, r22
    115a:	2c 91       	ld	r18, X
    115c:	11 96       	adiw	r26, 0x01	; 1
    115e:	3c 91       	ld	r19, X
    1160:	11 97       	sbiw	r26, 0x01	; 1
    1162:	12 96       	adiw	r26, 0x02	; 2
    1164:	8c 91       	ld	r24, X
    1166:	12 97       	sbiw	r26, 0x02	; 2
    1168:	48 2f       	mov	r20, r24
    116a:	4f 77       	andi	r20, 0x7F	; 127
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	98 2f       	mov	r25, r24
    1170:	99 1f       	adc	r25, r25
    1172:	99 27       	eor	r25, r25
    1174:	99 1f       	adc	r25, r25
    1176:	13 96       	adiw	r26, 0x03	; 3
    1178:	6c 91       	ld	r22, X
    117a:	13 97       	sbiw	r26, 0x03	; 3
    117c:	86 2f       	mov	r24, r22
    117e:	88 0f       	add	r24, r24
    1180:	89 2b       	or	r24, r25
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	66 1f       	adc	r22, r22
    1186:	66 27       	eor	r22, r22
    1188:	66 1f       	adc	r22, r22
    118a:	61 83       	std	Z+1, r22	; 0x01
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	39 f5       	brne	.+78     	; 0x11de <__unpack_f+0x88>
    1190:	21 15       	cp	r18, r1
    1192:	31 05       	cpc	r19, r1
    1194:	41 05       	cpc	r20, r1
    1196:	51 05       	cpc	r21, r1
    1198:	11 f4       	brne	.+4      	; 0x119e <__unpack_f+0x48>
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	29 c0       	rjmp	.+82     	; 0x11f0 <__unpack_f+0x9a>
    119e:	82 e8       	ldi	r24, 0x82	; 130
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	93 83       	std	Z+3, r25	; 0x03
    11a4:	82 83       	std	Z+2, r24	; 0x02
    11a6:	67 e0       	ldi	r22, 0x07	; 7
    11a8:	22 0f       	add	r18, r18
    11aa:	33 1f       	adc	r19, r19
    11ac:	44 1f       	adc	r20, r20
    11ae:	55 1f       	adc	r21, r21
    11b0:	6a 95       	dec	r22
    11b2:	d1 f7       	brne	.-12     	; 0x11a8 <__unpack_f+0x52>
    11b4:	83 e0       	ldi	r24, 0x03	; 3
    11b6:	80 83       	st	Z, r24
    11b8:	09 c0       	rjmp	.+18     	; 0x11cc <__unpack_f+0x76>
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	44 1f       	adc	r20, r20
    11c0:	55 1f       	adc	r21, r21
    11c2:	82 81       	ldd	r24, Z+2	; 0x02
    11c4:	93 81       	ldd	r25, Z+3	; 0x03
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	93 83       	std	Z+3, r25	; 0x03
    11ca:	82 83       	std	Z+2, r24	; 0x02
    11cc:	20 30       	cpi	r18, 0x00	; 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	38 07       	cpc	r19, r24
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	48 07       	cpc	r20, r24
    11d6:	80 e4       	ldi	r24, 0x40	; 64
    11d8:	58 07       	cpc	r21, r24
    11da:	78 f3       	brcs	.-34     	; 0x11ba <__unpack_f+0x64>
    11dc:	20 c0       	rjmp	.+64     	; 0x121e <__unpack_f+0xc8>
    11de:	8f 3f       	cpi	r24, 0xFF	; 255
    11e0:	91 05       	cpc	r25, r1
    11e2:	79 f4       	brne	.+30     	; 0x1202 <__unpack_f+0xac>
    11e4:	21 15       	cp	r18, r1
    11e6:	31 05       	cpc	r19, r1
    11e8:	41 05       	cpc	r20, r1
    11ea:	51 05       	cpc	r21, r1
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <__unpack_f+0x9e>
    11ee:	84 e0       	ldi	r24, 0x04	; 4
    11f0:	80 83       	st	Z, r24
    11f2:	08 95       	ret
    11f4:	44 ff       	sbrs	r20, 4
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <__unpack_f+0xa8>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	80 83       	st	Z, r24
    11fc:	10 c0       	rjmp	.+32     	; 0x121e <__unpack_f+0xc8>
    11fe:	10 82       	st	Z, r1
    1200:	0e c0       	rjmp	.+28     	; 0x121e <__unpack_f+0xc8>
    1202:	8f 57       	subi	r24, 0x7F	; 127
    1204:	90 40       	sbci	r25, 0x00	; 0
    1206:	93 83       	std	Z+3, r25	; 0x03
    1208:	82 83       	std	Z+2, r24	; 0x02
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	80 83       	st	Z, r24
    120e:	87 e0       	ldi	r24, 0x07	; 7
    1210:	22 0f       	add	r18, r18
    1212:	33 1f       	adc	r19, r19
    1214:	44 1f       	adc	r20, r20
    1216:	55 1f       	adc	r21, r21
    1218:	8a 95       	dec	r24
    121a:	d1 f7       	brne	.-12     	; 0x1210 <__unpack_f+0xba>
    121c:	50 64       	ori	r21, 0x40	; 64
    121e:	24 83       	std	Z+4, r18	; 0x04
    1220:	35 83       	std	Z+5, r19	; 0x05
    1222:	46 83       	std	Z+6, r20	; 0x06
    1224:	57 83       	std	Z+7, r21	; 0x07
    1226:	08 95       	ret

00001228 <__fpcmp_parts_f>:
    1228:	fc 01       	movw	r30, r24
    122a:	db 01       	movw	r26, r22
    122c:	90 81       	ld	r25, Z
    122e:	92 30       	cpi	r25, 0x02	; 2
    1230:	08 f4       	brcc	.+2      	; 0x1234 <__fpcmp_parts_f+0xc>
    1232:	49 c0       	rjmp	.+146    	; 0x12c6 <__fpcmp_parts_f+0x9e>
    1234:	8c 91       	ld	r24, X
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	08 f4       	brcc	.+2      	; 0x123c <__fpcmp_parts_f+0x14>
    123a:	45 c0       	rjmp	.+138    	; 0x12c6 <__fpcmp_parts_f+0x9e>
    123c:	94 30       	cpi	r25, 0x04	; 4
    123e:	51 f4       	brne	.+20     	; 0x1254 <__fpcmp_parts_f+0x2c>
    1240:	61 81       	ldd	r22, Z+1	; 0x01
    1242:	84 30       	cpi	r24, 0x04	; 4
    1244:	b1 f5       	brne	.+108    	; 0x12b2 <__fpcmp_parts_f+0x8a>
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	2c 91       	ld	r18, X
    124a:	11 97       	sbiw	r26, 0x01	; 1
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	26 1b       	sub	r18, r22
    1250:	31 09       	sbc	r19, r1
    1252:	41 c0       	rjmp	.+130    	; 0x12d6 <__fpcmp_parts_f+0xae>
    1254:	84 30       	cpi	r24, 0x04	; 4
    1256:	21 f0       	breq	.+8      	; 0x1260 <__fpcmp_parts_f+0x38>
    1258:	92 30       	cpi	r25, 0x02	; 2
    125a:	41 f4       	brne	.+16     	; 0x126c <__fpcmp_parts_f+0x44>
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	b1 f1       	breq	.+108    	; 0x12cc <__fpcmp_parts_f+0xa4>
    1260:	11 96       	adiw	r26, 0x01	; 1
    1262:	8c 91       	ld	r24, X
    1264:	11 97       	sbiw	r26, 0x01	; 1
    1266:	88 23       	and	r24, r24
    1268:	a1 f1       	breq	.+104    	; 0x12d2 <__fpcmp_parts_f+0xaa>
    126a:	2d c0       	rjmp	.+90     	; 0x12c6 <__fpcmp_parts_f+0x9e>
    126c:	61 81       	ldd	r22, Z+1	; 0x01
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	01 f1       	breq	.+64     	; 0x12b2 <__fpcmp_parts_f+0x8a>
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	8c 91       	ld	r24, X
    1276:	11 97       	sbiw	r26, 0x01	; 1
    1278:	68 17       	cp	r22, r24
    127a:	d9 f4       	brne	.+54     	; 0x12b2 <__fpcmp_parts_f+0x8a>
    127c:	22 81       	ldd	r18, Z+2	; 0x02
    127e:	33 81       	ldd	r19, Z+3	; 0x03
    1280:	12 96       	adiw	r26, 0x02	; 2
    1282:	8d 91       	ld	r24, X+
    1284:	9c 91       	ld	r25, X
    1286:	13 97       	sbiw	r26, 0x03	; 3
    1288:	82 17       	cp	r24, r18
    128a:	93 07       	cpc	r25, r19
    128c:	94 f0       	brlt	.+36     	; 0x12b2 <__fpcmp_parts_f+0x8a>
    128e:	28 17       	cp	r18, r24
    1290:	39 07       	cpc	r19, r25
    1292:	bc f0       	brlt	.+46     	; 0x12c2 <__fpcmp_parts_f+0x9a>
    1294:	24 81       	ldd	r18, Z+4	; 0x04
    1296:	35 81       	ldd	r19, Z+5	; 0x05
    1298:	46 81       	ldd	r20, Z+6	; 0x06
    129a:	57 81       	ldd	r21, Z+7	; 0x07
    129c:	14 96       	adiw	r26, 0x04	; 4
    129e:	8d 91       	ld	r24, X+
    12a0:	9d 91       	ld	r25, X+
    12a2:	0d 90       	ld	r0, X+
    12a4:	bc 91       	ld	r27, X
    12a6:	a0 2d       	mov	r26, r0
    12a8:	82 17       	cp	r24, r18
    12aa:	93 07       	cpc	r25, r19
    12ac:	a4 07       	cpc	r26, r20
    12ae:	b5 07       	cpc	r27, r21
    12b0:	18 f4       	brcc	.+6      	; 0x12b8 <__fpcmp_parts_f+0x90>
    12b2:	66 23       	and	r22, r22
    12b4:	41 f0       	breq	.+16     	; 0x12c6 <__fpcmp_parts_f+0x9e>
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <__fpcmp_parts_f+0xaa>
    12b8:	28 17       	cp	r18, r24
    12ba:	39 07       	cpc	r19, r25
    12bc:	4a 07       	cpc	r20, r26
    12be:	5b 07       	cpc	r21, r27
    12c0:	28 f4       	brcc	.+10     	; 0x12cc <__fpcmp_parts_f+0xa4>
    12c2:	66 23       	and	r22, r22
    12c4:	31 f0       	breq	.+12     	; 0x12d2 <__fpcmp_parts_f+0xaa>
    12c6:	21 e0       	ldi	r18, 0x01	; 1
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <__fpcmp_parts_f+0xae>
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <__fpcmp_parts_f+0xae>
    12d2:	2f ef       	ldi	r18, 0xFF	; 255
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	c9 01       	movw	r24, r18
    12d8:	08 95       	ret

000012da <__prologue_saves__>:
    12da:	2f 92       	push	r2
    12dc:	3f 92       	push	r3
    12de:	4f 92       	push	r4
    12e0:	5f 92       	push	r5
    12e2:	6f 92       	push	r6
    12e4:	7f 92       	push	r7
    12e6:	8f 92       	push	r8
    12e8:	9f 92       	push	r9
    12ea:	af 92       	push	r10
    12ec:	bf 92       	push	r11
    12ee:	cf 92       	push	r12
    12f0:	df 92       	push	r13
    12f2:	ef 92       	push	r14
    12f4:	ff 92       	push	r15
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	ca 1b       	sub	r28, r26
    1304:	db 0b       	sbc	r29, r27
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	09 94       	ijmp

00001312 <__epilogue_restores__>:
    1312:	2a 88       	ldd	r2, Y+18	; 0x12
    1314:	39 88       	ldd	r3, Y+17	; 0x11
    1316:	48 88       	ldd	r4, Y+16	; 0x10
    1318:	5f 84       	ldd	r5, Y+15	; 0x0f
    131a:	6e 84       	ldd	r6, Y+14	; 0x0e
    131c:	7d 84       	ldd	r7, Y+13	; 0x0d
    131e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1320:	9b 84       	ldd	r9, Y+11	; 0x0b
    1322:	aa 84       	ldd	r10, Y+10	; 0x0a
    1324:	b9 84       	ldd	r11, Y+9	; 0x09
    1326:	c8 84       	ldd	r12, Y+8	; 0x08
    1328:	df 80       	ldd	r13, Y+7	; 0x07
    132a:	ee 80       	ldd	r14, Y+6	; 0x06
    132c:	fd 80       	ldd	r15, Y+5	; 0x05
    132e:	0c 81       	ldd	r16, Y+4	; 0x04
    1330:	1b 81       	ldd	r17, Y+3	; 0x03
    1332:	aa 81       	ldd	r26, Y+2	; 0x02
    1334:	b9 81       	ldd	r27, Y+1	; 0x01
    1336:	ce 0f       	add	r28, r30
    1338:	d1 1d       	adc	r29, r1
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	ed 01       	movw	r28, r26
    1346:	08 95       	ret

00001348 <_exit>:
    1348:	f8 94       	cli

0000134a <__stop_program>:
    134a:	ff cf       	rjmp	.-2      	; 0x134a <__stop_program>
